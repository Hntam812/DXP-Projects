{"$schema":"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#","contentVersion":"1.0.0.0","parameters":{"factoryName":{"type":"string","metadata":"Data Factory name"},"Snowflake_SandboxUnited":{"type":"string"},"StagingKeyVault":{"type":"string"}},"variables":{"factoryId":"[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"},"resources":[{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_stage_3_autodeal_sf_2_es')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Process Index Change target user","type":"Script","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"set TransactionId = '@{pipeline().parameters.TransactionId}';\nbegin\n\nif (exists (select top 1 1 from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA)) then\n\ndelete from  RS_SCHEMA.ElasticDocument main using (\n     select offerCode from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA  where Metadata$Action = 'INSERT')\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER)\n      group by offerCode\n ) index_delete \n where index_delete.OfferCode = main.OfferCode ;\n \n\nmerge into RS_SCHEMA.ElasticDocument main\nusing(\n select --top 100\n  PROGRAMCODE, \n  CustomerToOffer.CustomerCode || '_' || targetUser.offercode as id, \n  CustomerToOffer.CustomerCode  as customercode, \n  targetUser.OFFERCODE,targetUser.PRODUCTCODE, targetUser.STORECODE\n  from (\n     select Max(PROGRAMCODE) as PROGRAMCODE, offerCode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode , \n     ARRAY_AGG (distinct storeCode) within group (order by storeCode) as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER\n       where OFFERID in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA)\n     group by offerCode\n ) targetUser\njoin  RS_SCHEMA.CustomerToOffer on CustomerToOffer.OfferCode = targetUser.OfferCode) indexchange on  indexchange.Id = main.Id\nwhen matched then update set\n\t\t\t\t\t\t\tPROGRAMCODE = indexchange.PROGRAMCODE,\n\t\t\t\t\t        CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nwhen not matched then insert (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nvalues (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);\nend if;\n\nIF  (exists(select top 1 1 from RS_SCHEMA.CustomerToOffer_DELTA where transactionid = $TransactionId)) then\ndelete from  RS_SCHEMA.ElasticDocument main using (\n     select CUSTOMERCODE, OFFERCODE from RS_SCHEMA.CustomerToOffer_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE and transactionid = $TransactionId\n ) index_delete \n where index_delete.OfferCode = main.OfferCode and index_delete.CustomerCode = main.CUSTOMERCODE;\n\n\nmerge into RS_SCHEMA.ElasticDocument main\nusing(\n select --top 100\n  PROGRAMCODE, \n  CustomerToOffer_DELTA.CustomerCode || '_' || targetUser.offercode as id, \n  CustomerToOffer_DELTA.CustomerCode  as customercode, \n  targetUser.OFFERCODE,targetUser.PRODUCTCODE, targetUser.STORECODE\n  from (\n     select Max(PROGRAMCODE) as PROGRAMCODE, offerCode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode , \n     ARRAY_AGG (distinct storeCode) within group (order by storeCode) as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER\n     group by offerCode\n ) targetUser\njoin  RS_SCHEMA.CustomerToOffer_DELTA on CustomerToOffer_DELTA.OfferCode = targetUser.OfferCode\nand Metadata$Action = 'INSERT' and  transactionid = $TransactionId\n) indexchange on indexchange.Id = main.Id\nwhen matched then update set\n                            PROGRAMCODE = indexchange.PROGRAMCODE,\n                            CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nwhen not matched then insert (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nvalues (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);\n\nend if;\nend;","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Process Index Change_Mass_Offer","type":"Script","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"DELETE FROM RS_SCHEMA.ElasticDocument AS main USING (\n     select offerCode from RS_SCHEMA.OFFERSTAGINGRUNING_MASS_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_MASS_DELTA  where Metadata$Action = 'INSERT')\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_MASS)\n      group by offerCode\n ) AS index_delete \nWHERE index_delete.OfferCode = main.OfferCode;\n \nMERGE INTO RS_SCHEMA.ElasticDocument AS main\nUSING (\n    select Max(PROGRAMCODE) as PROGRAMCODE,\n    'MASS_' || offercode as id, \n    'MASS' as CUSTOMERCODE,\n     offerCode as offercode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode, \n     [] as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_MASS\n     where OFFERID in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_MASS_DELTA) \n     and PROGRAMCODE not in (select PROGRAMCODE from RS_SCHEMA.OFFERPROGRAM where ENGINE = 'HEALTH')\n     and PROGRAMCODE != 'AUTO_LOAD_OFFERS'\n     group by offerCode\n ) indexchange ON indexchange.Id = main.Id\nWHEN MATCHED THEN UPDATE SET\n\t\t\t\t\t\t\tPROGRAMCODE = indexchange.PROGRAMCODE,\n\t\t\t\t\t        CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nWHEN NOT MATCHED THEN INSERT (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nVALUES (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Process Index Change_Target_Store","type":"Script","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"DELETE FROM RS_SCHEMA.ElasticDocument AS main USING (\n     select offerCode from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE_DELTA where Metadata$Action = 'INSERT')\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE)\n      group by offerCode\n ) AS index_delete \nWHERE index_delete.OfferCode = main.OfferCode;\n \nMERGE INTO RS_SCHEMA.ElasticDocument AS main\nUSING (\n    select Max(PROGRAMCODE) as PROGRAMCODE,\n    'MASS_' || offercode as id, \n    'MASS' as CUSTOMERCODE,\n     offerCode as offercode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode, \n     ARRAY_AGG (distinct storeCode) within group (order by storeCode) as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE\n     where OFFERID in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE_DELTA) \n     group by offerCode\n ) indexchange ON indexchange.Id = main.Id\nWHEN MATCHED THEN UPDATE SET\n\t\t\t\t\t\t\tPROGRAMCODE = indexchange.PROGRAMCODE,\n\t\t\t\t\t        CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nWHEN NOT MATCHED THEN INSERT (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nVALUES (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Get CDC change","type":"Script","dependsOn":[{"activity":"Process Index Change target user","dependencyConditions":["Succeeded"]},{"activity":"Process Index Change_Mass_Offer","dependencyConditions":["Succeeded"]},{"activity":"Process Index Change_Target_Store","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"BEGIN\nINSERT INTO Rs_Schema.ElasticDocument_delta \n    (ROWID,PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE,METADATA$ACTION,METADATA$ISUPDATE,METADATA$ROW_ID,TRANSACTIONID)\nSELECT ROWID,PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE,METADATA$ACTION,METADATA$ISUPDATE,METADATA$ROW_ID,'@{pipeline().parameters.TransactionId}'\nFROM Rs_Schema.ElasticDocument_check\nWHERE \n    Metadata$Action != 'DELETE' \n    OR (Metadata$Action = 'DELETE' \n        AND Metadata$IsUpdate = FALSE);\n\nCREATE OR REPLACE TABLE RS_SCHEMA.STAGINGELASTICDOCUMENT_DELTA(\n    partition_num NUMBER AUTOINCREMENT,\n    ID VARCHAR,\n    CUSTOMERCODE VARCHAR, \n    OFFERCODE VARCHAR,\n    PRODUCTCODES ARRAY,\n    STORECODES ARRAY,\n    METADATA$ACTION VARCHAR(50),\n    METADATA$ISUPDATE BOOLEAN\n);\n\nINSERT INTO RS_SCHEMA.STAGINGELASTICDOCUMENT_DELTA \n(ID, CUSTOMERCODE, OFFERCODE, PRODUCTCODES, STORECODES, METADATA$ACTION, METADATA$ISUPDATE)\nSELECT\n    ID,\n    CUSTOMERCODE, \n    OFFERCODE,\n    PRODUCTCODE as PRODUCTCODES,\n    STORECODE as STORECODES,\n    METADATA$ACTION,\n    METADATA$ISUPDATE\nFROM RS_SCHEMA.ELASTICDOCUMENT_DELTA\nWHERE \n    TransactionId = '@{pipeline().parameters.TransactionId}';\n\nEND;","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Reset StreamSets offset","type":"WebActivity","dependsOn":[{"activity":"Get CDC change","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"http://192.168.20.208:18630/rest/v1/pipeline/SandboxUne3ac7afd-a50f-46e0-a8fd-0719d9a0fd33/resetOffset","connectVia":{"referenceName":"dev-rs-dxp-staging-ir","type":"IntegrationRuntimeReference"},"method":"POST","headers":{"X-Requested-By":"Data Collector"},"body":{"value":"{}","type":"Expression"},"authentication":{"type":"Basic","username":"admin","password":{"type":"AzureKeyVaultSecret","store":{"referenceName":"[parameters('StagingKeyVault')]","type":"LinkedServiceReference"},"secretName":"dev-streamset-pw"}}}},{"name":"Trigger StreamSets CRUD and Clear cache","type":"WebActivity","dependsOn":[{"activity":"Reset StreamSets offset","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"http://192.168.20.208:18630/rest/v1/pipeline/SandboxUne3ac7afd-a50f-46e0-a8fd-0719d9a0fd33/start","connectVia":{"referenceName":"dev-rs-dxp-staging-ir","type":"IntegrationRuntimeReference"},"method":"POST","headers":{"X-Requested-By":"Data Collector"},"body":{"value":"{\n    \"TransactionId\":\"@{pipeline().parameters.TransactionId}\",\n    \"IsStageAllOffer\":\"@{pipeline().parameters.IsStageAllOffer}\"\n}","type":"Expression"},"authentication":{"type":"Basic","username":"admin","password":{"type":"AzureKeyVaultSecret","store":{"referenceName":"[parameters('StagingKeyVault')]","type":"LinkedServiceReference"},"secretName":"dev-streamset-pw"}}}},{"name":"sandboxunited_pipeline_Message_Notification_Success_V1","type":"ExecutePipeline","dependsOn":[{"activity":"Trigger StreamSets CRUD and Clear cache","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Success_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{}}},{"name":"sandboxunited_pipeline_Message_Notification_Failed_V1","type":"ExecutePipeline","dependsOn":[{"activity":"sandboxunited_pipeline_Message_Notification_Success_V1","dependencyConditions":["Failed","Skipped"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Failed_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{}}},{"name":"Fail","type":"Fail","dependsOn":[{"activity":"sandboxunited_pipeline_Message_Notification_Failed_V1","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"message":"step failed","errorCode":"112"}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"TransactionId":{"type":"string"},"IsStageAllOffer":{"type":"string"},"IsStage":{"type":"string","defaultValue":"false"}},"variables":{"Programcodes":{"type":"Array"},"programCodesQuery":{"type":"String"}},"folder":{"name":"Sandbox United/Offer/Staging_Offer"},"annotations":[]},"dependsOn":["[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Success_V1')]","[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Failed_V1')]"]},{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_Message_Notification_Success_V1')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Success notitication V1","type":"WebActivity","dependsOn":[],"policy":{"timeout":"7.00:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"https://dev-etl-notification.azurewebsites.net:443/api/send-mail-v2/triggers/manual/invoke?api-version=2022-05-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dtvUizvpLpbvOZKtm5HTaEOw7gNX6iWsgPWLHMrdtZ4","method":"POST","headers":{},"body":{"value":"{\n   \"DataFactoryName\": '@{concat(' ',pipeline().DataFactory)}',\n   \"PipelineName\": '@{concat(' ',pipeline()?.TriggeredByPipelineName)}',\n   \"Subject\":  '@{concat('[SUCCESS]✅ ',pipeline().parameters.Enviroment,' ',pipeline().parameters.Subject)}',\n   \"ErrorMessage\": '@{concat(' ',pipeline().parameters.Message)}',\n   \"EmailTo\": '@{concat(' ',pipeline().parameters.EmailTo)}',\n   \"output\": '@{concat(' ',pipeline().parameters.Output)}',\n   \"data\": '@{concat(' ',pipeline().parameters.Data)}'\n}","type":"Expression"}}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"Subject":{"type":"string"},"Message":{"type":"string","defaultValue":"Everything is okay"},"EmailTo":{"type":"string","defaultValue":"thuy.n@stor.ai,tam.h@stor.ai"},"Output":{"type":"string"},"Data":{"type":"string"},"Enviroment":{"type":"string","defaultValue":"SandboxUnited"}},"folder":{"name":"Notification Form/SandboxUnited_Notification"},"annotations":[],"lastPublishTime":"2023-04-12T09:45:51Z"},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_Message_Notification_Failed_V1')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Failed notitication V1","type":"WebActivity","dependsOn":[],"policy":{"timeout":"7.00:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"https://dev-etl-notification.azurewebsites.net:443/api/send-mail-v2/triggers/manual/invoke?api-version=2022-05-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dtvUizvpLpbvOZKtm5HTaEOw7gNX6iWsgPWLHMrdtZ4","method":"POST","headers":{},"body":{"value":"{\n   \"DataFactoryName\": '@{concat(' ',pipeline().DataFactory)}',\n   \"PipelineName\": '@{concat(' ',pipeline()?.TriggeredByPipelineName)}',\n   \"Subject\":  ' @{concat('[FAILED]❌ ',pipeline().parameters.Enviroment,' ',pipeline().parameters.Subject)}',\n   \"ErrorMessage\": '@{concat(' ',pipeline().parameters.Message)}',\n   \"EmailTo\": '@{concat(' ',pipeline().parameters.EmailTo)}',\n   \"output\": '@{concat(' ',pipeline().parameters.Output)}',\n   \"data\": '@{concat(' ',pipeline().parameters.Data)}'\n}","type":"Expression"}}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"Subject":{"type":"string"},"Message":{"type":"string","defaultValue":"Something is wrong!"},"EmailTo":{"type":"string","defaultValue":"thuy.n@stor.ai,tam.h@stor.ai"},"Output":{"type":"string"},"Data":{"type":"string"},"Enviroment":{"type":"string","defaultValue":"SandboxUnited"}},"folder":{"name":"Notification Form/SandboxUnited_Notification"},"annotations":[],"lastPublishTime":"2023-04-12T09:45:52Z"},"dependsOn":[]}]}