{"$schema":"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#","contentVersion":"1.0.0.0","parameters":{"factoryName":{"type":"string","metadata":"Data Factory name"},"AzureBlobStorage_SandboxUnited":{"type":"string"},"SqlServer_SandboxUnited_Offer":{"type":"string"},"Snowflake_SandboxUnited":{"type":"string"},"SqlServer_SandboxUnited_Staging":{"type":"string"},"SqlServer_Sandbox_UnitedStaging":{"type":"string"},"StagingKeyVault":{"type":"string"}},"variables":{"factoryId":"[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"},"resources":[{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_stage_2_offerstagingruning_delta_sf_2_sql')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Available Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_Available_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"PROGRAMENGINE","type":"String"},"sink":{"name":"ProgramEngine","type":"String"}},{"source":{"name":"MEMBERACCOUNT","type":"String"},"sink":{"name":"MemberAccount","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Available_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Available_Delta","type":"DatasetReference","parameters":{}}]},{"name":"Mass Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_Mass_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"NAME","type":"String"},"sink":{"name":"Name","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DISCOUNTPRICING","type":"String"},"sink":{"name":"DiscountPricing","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Mass_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Mass_Delta","type":"DatasetReference","parameters":{}}]},{"name":"TargetStore Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_TargetStore_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"STORECODE","type":"String"},"sink":{"name":"StoreCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"NAME","type":"String"},"sink":{"name":"Name","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DISCOUNTPRICING","type":"String"},"sink":{"name":"DiscountPricing","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetStore_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetStore_Delta","type":"DatasetReference","parameters":{}}]},{"name":"TargetList Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_TargetList_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"NAME","type":"String"},"sink":{"name":"Name","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DISCOUNTPRICING","type":"String"},"sink":{"name":"DiscountPricing","type":"String"}},{"source":{"name":"ISACTIVE","type":"String"},"sink":{"name":"IsActive","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetList_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetList_Delta","type":"DatasetReference","parameters":{}}]},{"name":"TargetUser Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_TargetUser_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"STORECODE","type":"String"},"sink":{"name":"StoreCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"NAME","type":"String"},"sink":{"name":"Name","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DISCOUNTPRICING","type":"String"},"sink":{"name":"DiscountPricing","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetUser_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetUser_Delta","type":"DatasetReference","parameters":{}}]},{"name":"NewEnrollment Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_NewEnrollment_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"NAME","type":"String"},"sink":{"name":"Name","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DISCOUNTPRICING","type":"String"},"sink":{"name":"DiscountPricing","type":"String"}},{"source":{"name":"ISACTIVE","type":"String"},"sink":{"name":"IsActive","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_NewEnrollment_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_NewEnrollment_Delta","type":"DatasetReference","parameters":{}}]},{"name":"RECO Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_RECO_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"String"}},{"source":{"name":"STORECODE","type":"String"},"sink":{"name":"StoreCode","type":"String"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"MOVEMENT","type":"String"},"sink":{"name":"Movement","type":"String"}},{"source":{"name":"ISONSALE","type":"String"},"sink":{"name":"IsOnSale","type":"String"}},{"source":{"name":"ISSINGLEPRODUCT","type":"String"},"sink":{"name":"IsSingleProduct","type":"String"}},{"source":{"name":"DEPARTMENTCODE1","type":"String"},"sink":{"name":"DepartmentCode1","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DEPARTMENTCODE2","type":"String"},"sink":{"name":"DepartmentCode2","type":"String"}},{"source":{"name":"DEPARTMENTNAME2","type":"String"},"sink":{"name":"DepartmentName2","type":"String"}},{"source":{"name":"DEPARTMENTCODE3","type":"String"},"sink":{"name":"DepartmentCode3","type":"String"}},{"source":{"name":"DEPARTMENTNAME3","type":"String"},"sink":{"name":"DepartmentName3","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_RECO_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_RECO_Delta","type":"DatasetReference","parameters":{}}]},{"name":"Offer Program Runs","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferProgramRuns_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"PROGRAMID","type":"String"},"sink":{"name":"ProgramId","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"ENDDATE","type":"String"},"sink":{"name":"EndDate","type":"String"}},{"source":{"name":"STATUS","type":"String"},"sink":{"name":"Status","type":"String"}},{"source":{"name":"EXECUTEDTIME","type":"String"},"sink":{"name":"ExecutedTime","type":"String"}},{"source":{"name":"CREATEDDATE","type":"String"},"sink":{"name":"CreatedDate","type":"String"}},{"source":{"name":"CREATEDBY","type":"String"},"sink":{"name":"CreatedBy","type":"String"}},{"source":{"name":"TOTALRESULT","type":"String"},"sink":{"name":"TotalResult","type":"String"}},{"source":{"name":"METADATA","type":"String"},"sink":{"name":"Metadata","type":"String"}},{"source":{"name":"SCHEDULEDTIME","type":"String"},"sink":{"name":"ScheduledTime","type":"String"}},{"source":{"name":"MODIFIEDBY","type":"String"},"sink":{"name":"ModifiedBy","type":"String"}},{"source":{"name":"MODIFIEDDATE","type":"String"},"sink":{"name":"ModifiedDate","type":"String"}},{"source":{"name":"ISDELETED","type":"String"},"sink":{"name":"IsDeleted","type":"String"}},{"source":{"name":"STAGINGSTATUS","type":"String"},"sink":{"name":"StagingStatus","type":"String"}},{"source":{"name":"LISTID","type":"String"},"sink":{"name":"ListId","type":"String"}},{"source":{"name":"CANCELLEDDATE","type":"String"},"sink":{"name":"CancelledDate","type":"String"}},{"source":{"name":"PREVIEWSTARTTIME","type":"String"},"sink":{"name":"PreviewStartTime","type":"String"}},{"source":{"name":"PREVIEWENDTIME","type":"String"},"sink":{"name":"PreviewEndTime","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"String"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_OfferProgramRuns_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferProgramRuns_Delta","type":"DatasetReference","parameters":{}}]},{"name":"CustomerToOffer Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","query":{"value":"select CUSTOMERCODE, OFFERCODE ,METADATA$ACTION, METADATA$ISUPDATE\nfrom RS_SCHEMA.CUSTOMERTOOFFER_DELTA  where transactionid ='@{pipeline().parameters.TransactionId}'\ngroup BY CUSTOMERCODE, OFFERCODE, METADATA$ACTION, METADATA$ISUPDATE\n\n","type":"Expression"},"exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_CustomerToOffer_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"CUSTOMERCODE","type":"String"},"sink":{"name":"CustomerCode","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_StagingCustomerToOffer_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_CustomerToOffer_Delta","type":"DatasetReference","parameters":{}}]},{"name":"CustomerToProduct Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","query":{"value":"select CUSTOMERCODE, PRODUCTCODE, RECORANK, RECOTYPE, MODELNAME, METADATA$ACTION, METADATA$ISUPDATE\nfrom RS_SCHEMA.CUSTOMERTOPRODUCT_DELTA  where transactionid ='@{pipeline().parameters.TransactionId}'\ngroup BY CUSTOMERCODE, PRODUCTCODE, RECORANK, RECOTYPE, MODELNAME, METADATA$ACTION, METADATA$ISUPDATE\n\n","type":"Expression"},"exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":{"value":"truncate table StagingOffer_CustomerToProduct_Delta","type":"Expression"},"writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"CUSTOMERCODE","type":"String"},"sink":{"name":"CustomerCode","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"RECORANK","type":"Int64"},"sink":{"name":"RecoRank","type":"Int32"}},{"source":{"name":"RECOTYPE","type":"String"},"sink":{"name":"RecoType","type":"String"}},{"source":{"name":"MODELNAME","type":"String"},"sink":{"name":"ModelName","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_StagingCustomerToProduct_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_CustomerToProduct_Delta","type":"DatasetReference","parameters":{}}]},{"name":"Offer Staging running","type":"Script","dependsOn":[{"activity":"TargetStore Delta","dependencyConditions":["Succeeded"]},{"activity":"TargetUser Delta","dependencyConditions":["Succeeded"]},{"activity":"TargetList Delta","dependencyConditions":["Succeeded"]},{"activity":"NewEnrollment Delta","dependencyConditions":["Succeeded"]},{"activity":"RECO Delta","dependencyConditions":["Succeeded"]},{"activity":"Mass Delta","dependencyConditions":["Succeeded"]},{"activity":"Available Delta","dependencyConditions":["Succeeded"]},{"activity":"Offer Program Runs","dependencyConditions":["Succeeded"]},{"activity":"CustomerToOffer Delta","dependencyConditions":["Succeeded"]},{"activity":"CustomerToProduct Delta","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('SqlServer_SandboxUnited_Offer')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"NonQuery","text":{"value":"-- Stage 4 - version 2.0.1\n\n---------------------------------------------------------------------------------------------------------------\n------- OfferStagingRuning_*\n---------------------------------------------------------------------------------------------------------------\n\n---------------------------------------------------------------------------------------------------------------\n--- Available\n---------------------------------------------------------------------------------------------------------------\n\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_Available\n    FROM OfferStagingRuning_Available main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Available_Delta] staging\n                  ON main.OfferId = staging.OfferId\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_Available\n    SET ProgramCode   = staging.ProgramCode\n      , RunId         = staging.RunId\n      , OfferCode     = staging.OfferCode\n      , ProgramEngine = staging.ProgramEngine\n      , MemberAccount = IIF(staging.MemberAccount = '', NULL, CONVERT(INT, staging.MemberAccount))\n    FROM OfferStagingRuning_Available main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Available_Delta] staging\n                  ON main.OfferId = staging.OfferId\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_Available (OfferId, ProgramCode, RunId, OfferCode, ProgramEngine, MemberAccount)\n    SELECT OfferId\n         , ProgramCode\n         , RunId\n         , OfferCode\n         , ProgramEngine\n         , IIF(MemberAccount = '', NULL, CONVERT(INT, MemberAccount))\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Available_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_Available AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND;\n\n\n---------------------------------------------------------------------------------------------------------------\n--- Mass\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_Mass\n    FROM OfferStagingRuning_Mass main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Mass_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_Mass\n    SET ProgramCode     = staging.ProgramCode\n      , OfferCode       = staging.OfferCode\n      , RunId           = staging.RunId\n      , OfferId         = staging.OfferId\n      , Name            = staging.Name\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , DepartmentName1 = staging.DepartmentName1\n      , DiscountPricing = staging.DiscountPricing\n    FROM OfferStagingRuning_Mass main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Mass_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_Mass ( Id, ProgramCode, OfferCode, RunId, OfferId, Name, StartDate, ProductCode\n                                        , PrimaryUPC, DepartmentName1, DiscountPricing)\n    SELECT Id\n         , ProgramCode\n         , OfferCode\n         , RunId\n         , OfferId\n         , Name\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , DepartmentName1\n         , DiscountPricing\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Mass_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_Mass AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n---------------------------------------------------------------------------------------------------------------\n--- TargetStore\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_TargetStore\n    FROM OfferStagingRuning_TargetStore main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetStore_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_TargetStore\n    SET OfferCode       = staging.OfferCode\n      , ProgramCode     = staging.ProgramCode\n      , StoreCode       = staging.StoreCode\n      , RunId           = staging.RunId\n      , OfferId         = staging.OfferId\n      , Name            = staging.Name\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , DepartmentName1 = staging.DepartmentName1\n      , DiscountPricing = staging.DiscountPricing\n    FROM OfferStagingRuning_TargetStore main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetStore_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_TargetStore ( Id, OfferCode, ProgramCode, StoreCode, RunId, OfferId, Name, StartDate\n                                               , ProductCode, PrimaryUPC, DepartmentName1, DiscountPricing)\n    SELECT Id\n         , OfferCode\n         , ProgramCode\n         , StoreCode\n         , RunId\n         , OfferId\n         , Name\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , DepartmentName1\n         , DiscountPricing\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetStore_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_TargetStore AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n\n---------------------------------------------------------------------------------------------------------------\n--- TargetList\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_TargetList\n    FROM OfferStagingRuning_TargetList main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetList_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_TargetList\n    SET Id              = staging.Id\n      , OfferCode       = staging.OfferCode\n      , ProgramCode     = staging.ProgramCode\n      , RunId           = staging.RunId\n      , OfferId         = staging.OfferId\n      , Name            = staging.Name\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , DepartmentName1 = staging.DepartmentName1\n      , DiscountPricing = staging.DiscountPricing\n      , IsActive        = IIF(staging.IsActive = '', NULL, CONVERT(BIT, staging.IsActive))\n    FROM OfferStagingRuning_TargetList main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetList_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_TargetList ( Id, OfferCode, ProgramCode, RunId, OfferId, Name, StartDate, ProductCode\n                                              , PrimaryUPC, DepartmentName1, DiscountPricing, IsActive)\n    SELECT Id\n         , OfferCode\n         , ProgramCode\n         , RunId\n         , OfferId\n         , Name\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , DepartmentName1\n         , DiscountPricing\n         , IIF(IsActive = '', NULL, CONVERT(BIT, IsActive))\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetList_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_TargetList AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n\n---------------------------------------------------------------------------------------------------------------\n--- TargetUser\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_TargetUser\n    FROM OfferStagingRuning_TargetUser main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetUser_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_TargetUser\n    SET ProgramCode     = staging.ProgramCode\n      , StoreCode       = staging.StoreCode\n      , RunId           = staging.RunId\n      , OfferId         = staging.OfferId\n      , OfferCode       = staging.OfferCode\n      , Name            = staging.Name\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , DepartmentName1 = staging.DepartmentName1\n      , DiscountPricing = staging.DiscountPricing\n    FROM OfferStagingRuning_TargetUser main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetUser_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_TargetUser ( Id, ProgramCode, StoreCode, RunId, OfferId, OfferCode, Name, StartDate\n                                              , ProductCode, PrimaryUPC, DepartmentName1, DiscountPricing)\n    SELECT Id\n         , ProgramCode\n         , StoreCode\n         , RunId\n         , OfferId\n         , OfferCode\n         , Name\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , DepartmentName1\n         , DiscountPricing\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetUser_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_TargetUser AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n\n---------------------------------------------------------------------------------------------------------------\n--- NewEnrollment\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_NewEnrollment\n    FROM OfferStagingRuning_NewEnrollment main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_NewEnrollment_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_NewEnrollment\n    SET ProgramCode     = staging.ProgramCode\n      , OfferCode       = staging.OfferCode\n      , RunId           = staging.RunId\n      , OfferId         = staging.OfferId\n      , Name            = staging.Name\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , DepartmentName1 = staging.DepartmentName1\n      , DiscountPricing = staging.DiscountPricing\n      , IsActive        = IIF(staging.IsActive = '', NULL, CONVERT(BIT, staging.IsActive))\n    FROM OfferStagingRuning_NewEnrollment main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_NewEnrollment_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_NewEnrollment ( Id, ProgramCode, OfferCode, RunId, OfferId, Name, StartDate\n                                                 , ProductCode\n                                                 , PrimaryUPC, DepartmentName1, DiscountPricing, IsActive)\n    SELECT Id\n         , ProgramCode\n         , OfferCode\n         , RunId\n         , OfferId\n         , Name\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , DepartmentName1\n         , DiscountPricing\n         , IIF(IsActive = '', NULL, CONVERT(BIT, IsActive))\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_NewEnrollment_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_NewEnrollment AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n\n---------------------------------------------------------------------------------------------------------------\n--- RECO\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_RECO\n    FROM OfferStagingRuning_RECO main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_RECO_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_RECO\n    SET OfferCode       = staging.OfferCode\n      , ProgramCode     = staging.ProgramCode\n      , RunId           = staging.RunId\n      , StoreCode       = staging.StoreCode\n      , OfferId         = staging.OfferId\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , Movement        = IIF(staging.Movement = '', NULL, CONVERT(INT, staging.Movement))\n      , IsOnSale        = IIF(staging.IsOnSale = '', NULL, CONVERT(BIT, staging.IsOnSale))\n      , IsSingleProduct = IIF(staging.IsSingleProduct = '', NULL, CONVERT(BIT, staging.IsSingleProduct))\n      , DepartmentCode1 = staging.DepartmentCode1\n      , DepartmentName1 = staging.DepartmentName1\n      , DepartmentCode2 = staging.DepartmentCode2\n      , DepartmentName2 = staging.DepartmentName2\n      , DepartmentCode3 = staging.DepartmentCode3\n      , DepartmentName3 = staging.DepartmentName3\n    FROM OfferStagingRuning_RECO main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_RECO_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_RECO ( Id, OfferCode, ProgramCode, RunId, StoreCode, OfferId, StartDate\n                                        , ProductCode, PrimaryUPC, Movement, IsOnSale, IsSingleProduct\n                                        , DepartmentCode1, DepartmentName1, DepartmentCode2, DepartmentName2\n                                        , DepartmentCode3, DepartmentName3)\n    SELECT Id\n         , OfferCode\n         , ProgramCode\n         , RunId\n         , StoreCode\n         , OfferId\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , IIF(Movement = '', NULL, CONVERT(INT, Movement))\n         , IIF(IsOnSale = '', NULL, CONVERT(BIT, IsOnSale))\n         , IIF(IsSingleProduct = '', NULL, CONVERT(BIT, IsSingleProduct))\n         , DepartmentCode1\n         , DepartmentName1\n         , DepartmentCode2\n         , DepartmentName2\n         , DepartmentCode3\n         , DepartmentName3\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_RECO_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_RECO AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n\n---------------------------------------------------------------------------------------------------------------\n------- OfferProgramRuns\n---------------------------------------------------------------------------------------------------------------\nUPDATE OfferProgramruns\nSET status        = staging.status\n  , stagingstatus = staging.stagingstatus\nFROM OfferProgramruns main\n         JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferProgramruns_Delta] staging ON main.Id = staging.Id\nWHERE Metadata$Action = 'INSERT'\n  AND Metadata$IsUpdate = 1;\n\n---------------------------------------------------------------------------------------------------------------\n------- CustomerToOffer\n---------------------------------------------------------------------------------------------------------------\nDELETE CustomerToOffer\nFROM CustomerToOffer main\n         JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_CustomerToOffer_Delta] staging\n              ON main.OfferCode = staging.OfferCode AND main.CustomerCode = staging.CustomerCode\nWHERE Metadata$Action = 'DELETE'\n  AND Metadata$IsUpdate = 0;\n\nINSERT INTO CustomerToOffer (OfferCode, CustomerCode)\nSELECT staging.OfferCode, staging.CustomerCode\nFROM [Sandbox-UnitedStaging].dbo.[StagingOffer_CustomerToOffer_Delta] staging\n         LEFT JOIN CustomerToOffer main\n                   ON main.OfferCode = staging.OfferCode AND main.CustomerCode = staging.CustomerCode\nWHERE Metadata$Action = 'INSERT'\n  AND Metadata$IsUpdate = 0\n  AND main.OfferCode IS NULL;\n\n\n-- DROP INDEX [NonClusteredIndex-20200807-144413-CustomerCode] ON [CustomerToProduct];\n-- DROP INDEX [NonClusteredIndex-20200807-150823-ProductCode] ON [CustomerToProduct];\n-- DROP INDEX [NonClusteredIndex-20210609-225408-RecoRank] ON [CustomerToProduct];\n--\n-- ALTER TABLE [CustomerToProduct]\n--     DROP CONSTRAINT PK_CustomerToOffer;\n--\n-- CREATE INDEX [NonClusteredIndex-20200807-144413-CustomerCode] ON [CustomerToProduct] (CustomerCode);\n-- CREATE INDEX [NonClusteredIndex-20200807-150823-ProductCode] ON [CustomerToProduct] (ProductCode);\n-- CREATE INDEX [NonClusteredIndex-20210609-225408-RecoRank] ON [CustomerToProduct] (RecoRank);\n-- ALTER TABLE [customertoproduct]\n--     ADD CONSTRAINT PK_CustomerToOffer PRIMARY KEY (CustomerCode, ProductCode);\n\n---------------------------------------------------------------------------------------------------------------\n------- CustomerToProduct\n---------------------------------------------------------------------------------------------------------------\nDELETE CustomerToProduct\nFROM CustomerToProduct main\n         JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_CustomerToProduct_Delta] staging\n              ON main.ProductCode = staging.ProductCode AND main.CustomerCode = staging.CustomerCode\nWHERE Metadata$Action = 'DELETE'\n  AND Metadata$IsUpdate = 0;\n\nINSERT INTO CustomerToProduct (ProductCode, CustomerCode, RecoRank, RecoType, ModelName)\nSELECT staging.ProductCode, staging.CustomerCode, staging.RecoRank, staging.RecoType, staging.ModelName\nFROM [Sandbox-UnitedStaging].dbo.[StagingOffer_CustomerToProduct_Delta] staging\n         LEFT JOIN CustomerToProduct main\n                   ON main.ProductCode = staging.ProductCode AND main.CustomerCode = staging.CustomerCode\nWHERE Metadata$Action = 'INSERT'\n  AND Metadata$IsUpdate = 0\n  AND main.ProductCode IS NULL;\n\nWITH cte AS (SELECT OfferId\n                  , ProgramCode\n                  , RunId\n                  , OfferCode\n                  , ProgramEngine\n                  , MemberAccount\n                  , ROW_NUMBER() OVER (\n        PARTITION BY\n        OfferId,\n        ProgramCode,\n        RunId,\n        OfferCode,\n        ProgramEngine,\n        MemberAccount\n        ORDER BY\n            OfferId,\n            ProgramCode,\n            RunId,\n            OfferCode,\n            ProgramEngine,\n            MemberAccount\n        ) row_num\n             FROM [dbo].[OfferStagingRuning_Available])\nDELETE\nFROM cte\nWHERE row_num > 1;\n\n---------------------------------------------------------------------------------------------------------------\n------- Handle clear cache\n---------------------------------------------------------------------------------------------------------------\nEXEC [dbo].[FlushCacheCouchBase]","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"sandboxunited_pipeline_Message_Notification_Success_V1","type":"ExecutePipeline","dependsOn":[{"activity":"Invoke next","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Success_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{}}},{"name":"sandboxunited_pipeline_Message_Notification_Failed_V1","type":"ExecutePipeline","dependsOn":[{"activity":"sandboxunited_pipeline_Message_Notification_Success_V1","dependencyConditions":["Failed","Skipped"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Failed_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{}}},{"name":"Fail","type":"Fail","dependsOn":[{"activity":"sandboxunited_pipeline_Message_Notification_Failed_V1","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"message":"step failed","errorCode":"112"}},{"name":"Invoke next","type":"ExecutePipeline","dependsOn":[{"activity":"Offer Staging running","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_stage_3_autodeal_sf_2_es","type":"PipelineReference"},"waitOnCompletion":false,"parameters":{"TransactionId":{"value":"@pipeline().parameters.TransactionId","type":"Expression"},"IsStageAllOffer":{"value":"@pipeline().parameters.IsStageAllOffer","type":"Expression"},"IsStage":{"value":"@pipeline().parameters.IsStage","type":"Expression"}}}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"TransactionId":{"type":"string"},"IsStageAllOffer":{"type":"string"},"IsStage":{"type":"string"}},"folder":{"name":"Sandbox United/Offer/Staging_Offer"},"annotations":[],"lastPublishTime":"2023-04-17T08:38:44Z"},"dependsOn":["[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Available_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Available_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Mass_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Mass_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetStore_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetStore_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetList_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetList_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetUser_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetUser_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_NewEnrollment_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_NewEnrollment_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_RECO_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_RECO_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_OfferProgramRuns_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferProgramRuns_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_StagingCustomerToOffer_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_CustomerToOffer_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_StagingCustomerToProduct_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_CustomerToProduct_Delta')]","[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Success_V1')]","[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Failed_V1')]","[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_stage_3_autodeal_sf_2_es')]"]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Available_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[{"name":"OFFERID","type":"VARCHAR","precision":244,"scale":0},{"name":"PROGRAMCODE","type":"VARCHAR","precision":50,"scale":0},{"name":"RUNID","type":"VARCHAR","precision":0,"scale":0},{"name":"OFFERCODE","type":"VARCHAR","precision":50,"scale":0},{"name":"PROGRAMENGINE","type":"VARCHAR","precision":50,"scale":0},{"name":"MEMBERACCOUNT","type":"VARCHAR","precision":200,"scale":0},{"name":"METADATA$ACTION","type":"VARCHAR","precision":50,"scale":0},{"name":"METADATA$ISUPDATE","type":"BOOLEAN","precision":1,"scale":0},{"name":"METADATA$ROW_ID","type":"VARCHAR","precision":0,"scale":0}],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_AVAILABLE_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Available_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_SandboxUnited_Staging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_Available_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Mass_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_MASS_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Mass_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_SandboxUnited_Staging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_Mass_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetStore_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_TARGETSTORE_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetStore_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_SandboxUnited_Staging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_TargetStore_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetList_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_TARGETLIST_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetList_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_TargetList_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetUser_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_TARGETUSER_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetUser_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_TargetUser_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_NewEnrollment_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_NEWENROLLMENT_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_NewEnrollment_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_NewEnrollment_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_RECO_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_RECO_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_RECO_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_RECO_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_OfferProgramRuns_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERPROGRAMRUNS_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferProgramRuns_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferProgramRuns_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_StagingCustomerToOffer_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_CustomerToOffer_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_CustomerToOffer_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_StagingCustomerToProduct_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_CustomerToProduct_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_CustomerToOffer_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_Message_Notification_Success_V1')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Success notitication V1","type":"WebActivity","dependsOn":[],"policy":{"timeout":"7.00:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"https://dev-etl-notification.azurewebsites.net:443/api/send-mail-v2/triggers/manual/invoke?api-version=2022-05-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dtvUizvpLpbvOZKtm5HTaEOw7gNX6iWsgPWLHMrdtZ4","method":"POST","headers":{},"body":{"value":"{\n   \"DataFactoryName\": '@{concat(' ',pipeline().DataFactory)}',\n   \"PipelineName\": '@{concat(' ',pipeline()?.TriggeredByPipelineName)}',\n   \"Subject\":  '@{concat('[SUCCESS]✅ ',pipeline().parameters.Enviroment,' ',pipeline().parameters.Subject)}',\n   \"ErrorMessage\": '@{concat(' ',pipeline().parameters.Message)}',\n   \"EmailTo\": '@{concat(' ',pipeline().parameters.EmailTo)}',\n   \"output\": '@{concat(' ',pipeline().parameters.Output)}',\n   \"data\": '@{concat(' ',pipeline().parameters.Data)}'\n}","type":"Expression"}}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"Subject":{"type":"string"},"Message":{"type":"string","defaultValue":"Everything is okay"},"EmailTo":{"type":"string","defaultValue":"thuy.n@stor.ai,tam.h@stor.ai"},"Output":{"type":"string"},"Data":{"type":"string"},"Enviroment":{"type":"string","defaultValue":"SandboxUnited"}},"folder":{"name":"Notification Form/SandboxUnited_Notification"},"annotations":[],"lastPublishTime":"2023-04-12T09:45:51Z"},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_Message_Notification_Failed_V1')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Failed notitication V1","type":"WebActivity","dependsOn":[],"policy":{"timeout":"7.00:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"https://dev-etl-notification.azurewebsites.net:443/api/send-mail-v2/triggers/manual/invoke?api-version=2022-05-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dtvUizvpLpbvOZKtm5HTaEOw7gNX6iWsgPWLHMrdtZ4","method":"POST","headers":{},"body":{"value":"{\n   \"DataFactoryName\": '@{concat(' ',pipeline().DataFactory)}',\n   \"PipelineName\": '@{concat(' ',pipeline()?.TriggeredByPipelineName)}',\n   \"Subject\":  ' @{concat('[FAILED]❌ ',pipeline().parameters.Enviroment,' ',pipeline().parameters.Subject)}',\n   \"ErrorMessage\": '@{concat(' ',pipeline().parameters.Message)}',\n   \"EmailTo\": '@{concat(' ',pipeline().parameters.EmailTo)}',\n   \"output\": '@{concat(' ',pipeline().parameters.Output)}',\n   \"data\": '@{concat(' ',pipeline().parameters.Data)}'\n}","type":"Expression"}}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"Subject":{"type":"string"},"Message":{"type":"string","defaultValue":"Something is wrong!"},"EmailTo":{"type":"string","defaultValue":"thuy.n@stor.ai,tam.h@stor.ai"},"Output":{"type":"string"},"Data":{"type":"string"},"Enviroment":{"type":"string","defaultValue":"SandboxUnited"}},"folder":{"name":"Notification Form/SandboxUnited_Notification"},"annotations":[],"lastPublishTime":"2023-04-12T09:45:52Z"},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_stage_3_autodeal_sf_2_es')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Process Index Change target user","type":"Script","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"set TransactionId = '@{pipeline().parameters.TransactionId}';\nbegin\n\nif (exists (select top 1 1 from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA)) then\n\ndelete from  RS_SCHEMA.ElasticDocument main using (\n     select offerCode from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA  where Metadata$Action = 'INSERT')\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER)\n      group by offerCode\n ) index_delete \n where index_delete.OfferCode = main.OfferCode ;\n \n\nmerge into RS_SCHEMA.ElasticDocument main\nusing(\n select --top 100\n  PROGRAMCODE, \n  CustomerToOffer.CustomerCode || '_' || targetUser.offercode as id, \n  CustomerToOffer.CustomerCode  as customercode, \n  targetUser.OFFERCODE,targetUser.PRODUCTCODE, targetUser.STORECODE\n  from (\n     select Max(PROGRAMCODE) as PROGRAMCODE, offerCode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode , \n     ARRAY_AGG (distinct storeCode) within group (order by storeCode) as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER\n       where OFFERID in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA)\n     group by offerCode\n ) targetUser\njoin  RS_SCHEMA.CustomerToOffer on CustomerToOffer.OfferCode = targetUser.OfferCode) indexchange on  indexchange.Id = main.Id\nwhen matched then update set\n\t\t\t\t\t\t\tPROGRAMCODE = indexchange.PROGRAMCODE,\n\t\t\t\t\t        CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nwhen not matched then insert (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nvalues (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);\nend if;\n\nIF  (exists(select top 1 1 from RS_SCHEMA.CustomerToOffer_DELTA where transactionid = $TransactionId)) then\ndelete from  RS_SCHEMA.ElasticDocument main using (\n     select CUSTOMERCODE, OFFERCODE from RS_SCHEMA.CustomerToOffer_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE and transactionid = $TransactionId\n ) index_delete \n where index_delete.OfferCode = main.OfferCode and index_delete.CustomerCode = main.CUSTOMERCODE;\n\n\nmerge into RS_SCHEMA.ElasticDocument main\nusing(\n select --top 100\n  PROGRAMCODE, \n  CustomerToOffer_DELTA.CustomerCode || '_' || targetUser.offercode as id, \n  CustomerToOffer_DELTA.CustomerCode  as customercode, \n  targetUser.OFFERCODE,targetUser.PRODUCTCODE, targetUser.STORECODE\n  from (\n     select Max(PROGRAMCODE) as PROGRAMCODE, offerCode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode , \n     ARRAY_AGG (distinct storeCode) within group (order by storeCode) as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER\n     group by offerCode\n ) targetUser\njoin  RS_SCHEMA.CustomerToOffer_DELTA on CustomerToOffer_DELTA.OfferCode = targetUser.OfferCode\nand Metadata$Action = 'INSERT' and  transactionid = $TransactionId\n) indexchange on indexchange.Id = main.Id\nwhen matched then update set\n                            PROGRAMCODE = indexchange.PROGRAMCODE,\n                            CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nwhen not matched then insert (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nvalues (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);\n\nend if;\nend;","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Process Index Change_Mass_Offer","type":"Script","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"DELETE FROM RS_SCHEMA.ElasticDocument AS main USING (\n     select offerCode from RS_SCHEMA.OFFERSTAGINGRUNING_MASS_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_MASS_DELTA  where Metadata$Action = 'INSERT')\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_MASS)\n      group by offerCode\n ) AS index_delete \nWHERE index_delete.OfferCode = main.OfferCode;\n \nMERGE INTO RS_SCHEMA.ElasticDocument AS main\nUSING (\n    select Max(PROGRAMCODE) as PROGRAMCODE,\n    'MASS_' || offercode as id, \n    'MASS' as CUSTOMERCODE,\n     offerCode as offercode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode, \n     [] as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_MASS\n     where OFFERID in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_MASS_DELTA) \n     and PROGRAMCODE not in (select PROGRAMCODE from RS_SCHEMA.OFFERPROGRAM where ENGINE = 'HEALTH')\n     and PROGRAMCODE != 'AUTO_LOAD_OFFERS'\n     group by offerCode\n ) indexchange ON indexchange.Id = main.Id\nWHEN MATCHED THEN UPDATE SET\n\t\t\t\t\t\t\tPROGRAMCODE = indexchange.PROGRAMCODE,\n\t\t\t\t\t        CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nWHEN NOT MATCHED THEN INSERT (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nVALUES (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Process Index Change_Target_Store","type":"Script","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"DELETE FROM RS_SCHEMA.ElasticDocument AS main USING (\n     select offerCode from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE_DELTA where Metadata$Action = 'INSERT')\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE)\n      group by offerCode\n ) AS index_delete \nWHERE index_delete.OfferCode = main.OfferCode;\n \nMERGE INTO RS_SCHEMA.ElasticDocument AS main\nUSING (\n    select Max(PROGRAMCODE) as PROGRAMCODE,\n    'MASS_' || offercode as id, \n    'MASS' as CUSTOMERCODE,\n     offerCode as offercode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode, \n     ARRAY_AGG (distinct storeCode) within group (order by storeCode) as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE\n     where OFFERID in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE_DELTA) \n     group by offerCode\n ) indexchange ON indexchange.Id = main.Id\nWHEN MATCHED THEN UPDATE SET\n\t\t\t\t\t\t\tPROGRAMCODE = indexchange.PROGRAMCODE,\n\t\t\t\t\t        CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nWHEN NOT MATCHED THEN INSERT (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nVALUES (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Get CDC change","type":"Script","dependsOn":[{"activity":"Process Index Change target user","dependencyConditions":["Succeeded"]},{"activity":"Process Index Change_Mass_Offer","dependencyConditions":["Succeeded"]},{"activity":"Process Index Change_Target_Store","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"BEGIN\nINSERT INTO Rs_Schema.ElasticDocument_delta \n    (ROWID,PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE,METADATA$ACTION,METADATA$ISUPDATE,METADATA$ROW_ID,TRANSACTIONID)\nSELECT ROWID,PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE,METADATA$ACTION,METADATA$ISUPDATE,METADATA$ROW_ID,'@{pipeline().parameters.TransactionId}'\nFROM Rs_Schema.ElasticDocument_check\nWHERE \n    Metadata$Action != 'DELETE' \n    OR (Metadata$Action = 'DELETE' \n        AND Metadata$IsUpdate = FALSE);\n\nCREATE OR REPLACE TABLE RS_SCHEMA.STAGINGELASTICDOCUMENT_DELTA(\n    partition_num NUMBER AUTOINCREMENT,\n    ID VARCHAR,\n    CUSTOMERCODE VARCHAR, \n    OFFERCODE VARCHAR,\n    PRODUCTCODES ARRAY,\n    STORECODES ARRAY,\n    METADATA$ACTION VARCHAR(50),\n    METADATA$ISUPDATE BOOLEAN\n);\n\nINSERT INTO RS_SCHEMA.STAGINGELASTICDOCUMENT_DELTA \n(ID, CUSTOMERCODE, OFFERCODE, PRODUCTCODES, STORECODES, METADATA$ACTION, METADATA$ISUPDATE)\nSELECT\n    ID,\n    CUSTOMERCODE, \n    OFFERCODE,\n    PRODUCTCODE as PRODUCTCODES,\n    STORECODE as STORECODES,\n    METADATA$ACTION,\n    METADATA$ISUPDATE\nFROM RS_SCHEMA.ELASTICDOCUMENT_DELTA\nWHERE \n    TransactionId = '@{pipeline().parameters.TransactionId}';\n\nEND;","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Reset StreamSets offset","type":"WebActivity","dependsOn":[{"activity":"Get CDC change","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"http://192.168.20.208:18630/rest/v1/pipeline/SandboxUne3ac7afd-a50f-46e0-a8fd-0719d9a0fd33/resetOffset","connectVia":{"referenceName":"dev-rs-dxp-staging-ir","type":"IntegrationRuntimeReference"},"method":"POST","headers":{"X-Requested-By":"Data Collector"},"body":{"value":"{}","type":"Expression"},"authentication":{"type":"Basic","username":"admin","password":{"type":"AzureKeyVaultSecret","store":{"referenceName":"[parameters('StagingKeyVault')]","type":"LinkedServiceReference"},"secretName":"dev-streamset-pw"}}}},{"name":"Trigger StreamSets CRUD and Clear cache","type":"WebActivity","dependsOn":[{"activity":"Reset StreamSets offset","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"http://192.168.20.208:18630/rest/v1/pipeline/SandboxUne3ac7afd-a50f-46e0-a8fd-0719d9a0fd33/start","connectVia":{"referenceName":"dev-rs-dxp-staging-ir","type":"IntegrationRuntimeReference"},"method":"POST","headers":{"X-Requested-By":"Data Collector"},"body":{"value":"{\n    \"TransactionId\":\"@{pipeline().parameters.TransactionId}\",\n    \"IsStageAllOffer\":\"@{pipeline().parameters.IsStageAllOffer}\"\n}","type":"Expression"},"authentication":{"type":"Basic","username":"admin","password":{"type":"AzureKeyVaultSecret","store":{"referenceName":"[parameters('StagingKeyVault')]","type":"LinkedServiceReference"},"secretName":"dev-streamset-pw"}}}},{"name":"sandboxunited_pipeline_Message_Notification_Success_V1","type":"ExecutePipeline","dependsOn":[{"activity":"Trigger StreamSets CRUD and Clear cache","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Success_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{}}},{"name":"sandboxunited_pipeline_Message_Notification_Failed_V1","type":"ExecutePipeline","dependsOn":[{"activity":"sandboxunited_pipeline_Message_Notification_Success_V1","dependencyConditions":["Failed","Skipped"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Failed_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{}}},{"name":"Fail","type":"Fail","dependsOn":[{"activity":"sandboxunited_pipeline_Message_Notification_Failed_V1","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"message":"step failed","errorCode":"112"}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"TransactionId":{"type":"string"},"IsStageAllOffer":{"type":"string"},"IsStage":{"type":"string","defaultValue":"false"}},"variables":{"Programcodes":{"type":"Array"},"programCodesQuery":{"type":"String"}},"folder":{"name":"Sandbox United/Offer/Staging_Offer"},"annotations":[]},"dependsOn":["[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Success_V1')]","[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Failed_V1')]"]}]}