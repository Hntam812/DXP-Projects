{"$schema":"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#","contentVersion":"1.0.0.0","parameters":{"factoryName":{"type":"string","metadata":"Data Factory name"},"StagingKeyVault":{"type":"string"},"Snowflake_SandboxUnited":{"type":"string"},"AzureBlobStorage_SandboxUnited":{"type":"string"},"SqlServer_SandboxUnited_Offer":{"type":"string"},"Snowflake_Uat2United":{"type":"string"},"SqlServer_SandboxUnited_Staging":{"type":"string"},"SqlServer_Sandbox_UnitedStaging":{"type":"string"}},"variables":{"factoryId":"[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"},"resources":[{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_stage_1_cdc_offer_5_mins')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"get_pipelines_run","type":"WebActivity","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"https://management.azure.com/subscriptions/6d8bd9cb-e90c-4df4-90a5-06355bc796d9/resourceGroups/RS_RD/providers/Microsoft.DataFactory/factories/dev-rs-dxp-df1/queryPipelineRuns?api-version=2018-06-01","connectVia":{"referenceName":"dev-rs-dxp-staging-ir","type":"IntegrationRuntimeReference"},"method":"POST","headers":{},"body":{"value":"{\n  \"lastUpdatedAfter\": \"@{addToTime(utcNow(),-1,'Day')}\",\n  \"lastUpdatedBefore\": \"@{utcNow()}\",\n  \"filters\": [\n    {\n      \"operand\": \"PipelineName\",\n      \"operator\": \"In\",\n      \"values\": [\n        \"sandboxunited_pipeline_stage_1_cdc_offer_5_mins\",\n        \"sandboxunited_pipeline_stage_2_offerstagingruning_delta_sf_2_sql\",\n        \"sandboxunited_pipeline_stage_3_sf_2_es\"\n      ]\n    },\n    {\n      \"operand\": \"Status\",\n      \"operator\": \"Equals\",\n      \"values\": [\n        \"InProgress\"\n      ]\n    }\n  ]\n}","type":"Expression"},"authentication":{"type":"MSI","resource":"https://management.azure.com"}}},{"name":"get_streamset_run status upset","type":"WebActivity","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":{"value":"http://192.168.20.208:18630/rest/v1/pipeline/@{variables('StreamSet_Upsert_Id')}/status","type":"Expression"},"connectVia":{"referenceName":"dev-rs-dxp-staging-ir","type":"IntegrationRuntimeReference"},"method":"GET","headers":{"X-Requested-By":"Data Collector"},"authentication":{"type":"Basic","username":"admin","password":{"type":"AzureKeyVaultSecret","store":{"referenceName":"[parameters('StagingKeyVault')]","type":"LinkedServiceReference"},"secretName":"dev-streamset-pw"}}}},{"name":"If pipeline is has in a another process","type":"IfCondition","dependsOn":[{"activity":"get_pipelines_run","dependencyConditions":["Succeeded"]},{"activity":"get_streamset_run status upset","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"expression":{"value":"@or(greater(length(activity('get_pipelines_run').output.value),1),\n\t\tequals(activity('get_streamset_run status upset').output.status, 'RUNNING'\n\t)\n)","type":"Expression"},"ifTrueActivities":[{"name":"Fail1","type":"Fail","dependsOn":[],"userProperties":[],"typeProperties":{"message":"still run","errorCode":"111"}}]}},{"name":"Set TransactionId","type":"SetVariable","dependsOn":[{"activity":"If pipeline is has in a another process","dependencyConditions":["Succeeded"]}],"policy":{"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"variableName":"TransactionId","value":{"value":"@guid()","type":"Expression"}}},{"name":"Set currentDate","type":"SetVariable","dependsOn":[{"activity":"If pipeline is has in a another process","dependencyConditions":["Succeeded"]}],"policy":{"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"variableName":"CurrentDate","value":{"value":"@formatDateTime(convertFromUtc(utcNow(),'Central Standard Time'),'yyyyMMdd')","type":"Expression"}}},{"name":"get cdc offer or program","type":"Script","dependsOn":[{"activity":"Rebuild Streams","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"/* Get CDC Programs */\n/* v1.0.1 */\n/* --------------------------------------------------------------------------------- */\n\nset is_change = FALSE;\nset is_index = FALSE;\nset is_change_all = FALSE;\n\nset Now = getdate()::datetime;\nset TransactionId = '@{variables('TransactionId')}';\n\ndeclare res resultset;\nbegin\n    /* For Program that is not running, set StagingStatus to None */\n    update rs_schema.OfferProgramRuns\n    set StagingStatus = 0\n    where (Status <> 1 and StagingStatus = 2) or StagingStatus is null;\n\n    /* Set effective ProgramRuns status (to Running) */\n    update rs_schema.OfferProgramRuns\n    set Status = 1\n    where (ScheduledTime <= $Now and StartDate <= $Now and $Now <= EndDate and Status = 0);\n\n    /* Set status of Finish ProgramRuns */\n    update rs_schema.OfferProgramRuns\n    set Status = 2\n    where (EndDate < $Now and Status <> 2);\n\n    /* insert into programchange: program, programrun, programrunpool */\n\n    /* --------------------------------------------------------------------------------- */\n    /* Search for a program that has recenty been modified */\n    /* --------------------------------------------------------------------------------- */\n    create or replace temporary table rs_schema.temp_program_changes (id nvarchar(256));\n\n    if (exists(select top 1 1 from rs_schema.offerprogram_check)) then\n        insert into rs_schema.temp_program_changes (id)\n        select id from rs_schema.offerprogram_check;\n    end if;\n\n    if (exists(select top 1 1 from rs_schema.offerprogramruns_check)) then\n        truncate table Rs_Schema.OfferProgramruns_delta;\n\n        insert into Rs_Schema.OfferProgramruns_delta\n        select * from Rs_Schema.OfferProgramruns_check\n        where Metadata$Action != 'DELETE' or (Metadata$Action = 'DELETE' and Metadata$IsUpdate = FALSE);\n\n        insert into rs_schema.temp_program_changes (id)\n        select programId from Rs_Schema.OfferProgramruns_delta;\n    end if;\n\n    if (exists(select top 1 1 from rs_schema.offerrunpool_check)) then\n        insert into rs_schema.temp_program_changes (id)\n        select b.programId\n        from rs_schema.offerrunpool_check a\n        join rs_schema.offerprogramruns b on b.id = a.programrunId;\n    end if;\n\n\n    /* If there exists a recently modified program: */\n    if (exists(select top 1 1 from rs_schema.temp_program_changes)) then\n        set is_change = TRUE;\n\n        insert into rs_schema.program_changes (id,programcode, transactionid, createdDate)\n        select distinct b.id, b.programcode, $TransactionId, $Now from rs_schema.temp_program_changes a\n        join rs_schema.offerprogram b on a.id = b.id;\n\n        if (\n            (\n                select count(*) \n                from rs_schema.offerprogramruns\n                where status = 1 and ProgramId not in (select id from rs_schema.program_changes where transactionId = $TransactionId)\n            ) = 0\n        ) then\n            set is_change_all = TRUE;\n        end if;\n\n    end if;\n\n\n    if ($is_change = TRUE) then\n        set is_index = TRUE;\n\n        insert into Rs_Schema.OfferStagingLog (TransactionId, Action, Description, ProgramCode)\n        select\t$TransactionId, 'Staging by program changes', 'Staging offer in program', ProgramCode\n        from RS_SCHEMA.program_changes Where TransactionId = $TransactionId;\n\n        truncate table RS_SCHEMA.OfferStagingRuning;\n\n        insert into RS_SCHEMA.OfferStagingRuning (\n                        Id,ProgramCode, ProgramEngine,RunId,CampaignCode,PromotionCode, OfferId,Name,OfferCode,StoreCode,Description,FullDescription,OfferType,ImageUrl,\n                        OfferSegment,MemberAccount,Provider, MemberAccountLoadQuantity,DiscountPricing,Size,Disclaimer,StartDate,EndDate,PromotionStartDate,PromotionEndDate,IsActive,\n                        /* Product */\n                        ProductCode, PrimaryUPC, Movement,DepartmentCode1,DepartmentCode2,DepartmentCode3,DepartmentName1,DepartmentName2,DepartmentName3,IsOnSale,IsSingleProduct)\n            with CTE_Offer as (\n                select \n                    *,\n                    ROW_NUMBER() over (partition by ProgramCode, StoreCode, offerUnique.Id, offerUnique.PrimaryUPC order by offerUnique.Movement desc, IsOnSale desc) as rn\n                from (\n                    select \n                        program.ProgramCode, program.Engine as ProgramEngine, runs.Id as RunId, campaign.CampaignCode, promotion.PromotionCode,\n                        offer.id, offer.Name, offer.OfferCode, OfferStore.StoreCode, offer.Description, offer.FullDescription, offer.OfferType, offer.ImageUrl,\n                        offer.OfferSegment, offer.MemberAccount, offer.DiscountPricing, offer.Size, offer.Disclaimer, offer.StartDate, offer.EndDate,\n                        offer.Provider, offer.MemberAccountLoadQuantity, offer.IsActive,\n                        promotion.StartDate as PromotionStartDate,\n                        promotion.EndDate as PromotionEndDate,\n                        Product.ProductCode, Product.PrimaryUPC, Product.Movement, Product.DepartmentCode1, Product.DepartmentCode2, Product.DepartmentCode3,\n                        Product.DepartmentName1, Product.DepartmentName2, Product.DepartmentName3,\n                        case \n                            when Campaign.CampaignCode in ('-1')\n                                or Campaign.Description = 'Business owned ad promotion' then 1 \n                            else 0\n                        end as IsOnSale -- weekly ad;\n                    from  RS_SCHEMA.OfferProgram as program\n                    inner join RS_SCHEMA.OfferProgramRuns as runs on runs.ProgramId = program.Id\n                    inner join RS_SCHEMA.OfferRunPool as pool on runs.Id = pool.ProgramRunId\n                    left join RS_SCHEMA.Campaign as poolCampaign on (poolCampaign.Id = pool.Value and pool.Type = 0)\n                    inner join RS_SCHEMA.Promotion as promotion on (promotion.Id = pool.Value and pool.Type = 1) or promotion.CampaignId = poolCampaign.Id\n                    inner join RS_SCHEMA.Campaign as campaign on campaign.Id = promotion.CampaignId\n                    inner join RS_SCHEMA.OfferPromotion as offerPromotion on offerPromotion.PromotionId = promotion.Id\n                    inner join RS_SCHEMA.Offer as offer on offer.Id = offerPromotion.OfferId or (offer.Id = pool.Value and pool.Type = 2)\n                    left join RS_SCHEMA.OfferProduct on OfferProduct.OfferId = offer.Id\n                    left join RS_SCHEMA.Product on Product.ProductCode = OfferProduct.ProductCode\n                    /* Only joined with OfferStore for program: OFFER_RECOMMENDATIONS, PERSONALIZED_DEALS, TARGET_STORE, TARGET_USER, WEEKLY_OFFERS */\n                    left join RS_SCHEMA.OfferStore \n                        on (\n                            OfferStore.OfferId = offer.Id\n                            and program.Engine != 'MASS' and program.Engine != 'NEW_ENROLLMENT'\n                            and program.Engine !='TARGET_LIST' and program.Engine !='HEALTH' -- not mass,new member,first appdownload,health!\n                            and (program.Engine !='AUTODEAL' or (program.Engine ='AUTODEAL' and offer.OfferType != 0)) -- not autodeal mass\n                            and program.Engine !='CONTINUITY' --not continuity\n                        )\n                    where \n                        /* ProgramRuns that is running */\n                        runs.status = 1\n                        and (program.IsDeleted is null or program.IsDeleted = 0)\n                        and (runs.IsDeleted is null or runs.IsDeleted = 0)\n\n                        /* Always correct condition? */\n                        and ($is_change = TRUE\n                                or (program.id in (select id from  RS_SCHEMA.program_changes Where TransactionId = $TransactionId))\n                            )\n                        and (poolCampaign.IsDeleted is null or poolCampaign.IsDeleted = 0)\n                        and (campaign.IsDeleted is null or campaign.IsDeleted = 0)\n                        and (promotion.IsDeleted is null or promotion.IsDeleted = 0)\n                        and (\n                                ((program.EnablePreview is null or program.EnablePreview = 0) and promotion.StartDate <= $Now and $Now <= promotion.EndDate)\n                                or (program.EnablePreview = 1 and promotion.StartDate <= runs.PreviewEndTime and runs.PreviewStartTime <= promotion.EndDate)\n                            )\n                        and (\n                                ((program.EnablePreview is null or program.EnablePreview = 0) and offer.StartDate <= $Now and $Now <= offer.EndDate)\n                                or (program.EnablePreview = 1 and offer.StartDate <= runs.PreviewEndTime and runs.PreviewStartTime <= offer.EndDate)\n                            )\n\n                        /* For OFFER_RECO engine, the related Product must exists */\n                        /* Otherwise, the Provider must match */\n                        and (\n                            (program.Engine = 'OFFER_RECOMMENDATIONS'\n                                and product.ProductCode is not null -- must have product\n                                and (OfferProduct.IsDeleted is null or OfferProduct.IsDeleted = 0)\n                                and (Product.DepartmentCode1 is not null and Product.DepartmentCode1 <>'')\n                                and (Product.IsDeleted is null or Product.IsDeleted = 0)\n                            )\n                            or ( program.Engine <> 'OFFER_RECOMMENDATIONS'\n                                and offer.Provider = program.Provider\n                            )\n                        )\n                        and (offer.IsDeleted is null or offer.IsDeleted = 0)\n\n                        /* For NEW_ENROLLMENT and TARGET_LIST Engine, the Offer don't have to be active */\n                        and (\n                                program.Engine = 'NEW_ENROLLMENT'\n                                or program.Engine = 'TARGET_LIST'\n                                or offer.IsActive = 1\n                            )\n                        and offer.DiscountPricing is not null and offer.DiscountPricing <> ''\n                        and offer.Name is not null and offer.Name <> ''\n                        and offer.ImageUrl is not null and offer.ImageUrl <> ''\n\n                        /* Program Engine - Offer Scope matching */\n                        and (\n                            (program.Engine = 'OFFER_RECOMMENDATIONS' and offer.OfferType = 0)\n                            or (program.Engine = 'MASS' and offer.OfferType = 0)\n                            or (program.Engine = 'TARGET_STORE' and offer.OfferType = 1)\n                            or (program.Engine = 'TARGET_USER' and (offer.OfferType = 2 or offer.OfferType = 3))\n                            or (program.Engine = 'NEW_ENROLLMENT' and offer.OfferType = 0)\n                            or (program.Engine = 'TARGET_LIST' and offer.OfferType = 0)\n                            or (program.Engine = 'HEALTH' and offer.OfferType = 0)\n                            or (program.Engine = 'AUTODEAL' and (offer.OfferType = 0 or offer.OfferType = 2))\n                            or (program.Engine = 'CONTINUITY' and offer.OfferType = 0)\n                        )\n                        and (OfferStore.IsDeleted is null or OfferStore.IsDeleted = 0)\n                    ) as offerUnique\n                )\n            select\n                ProgramCode || ifnull(StoreCode,'|') || id || ifnull(PrimaryUPC,'|') as Id,\n                ProgramCode,\n                ProgramEngine,\n                RunId,\n                CampaignCode,\n                PromotionCode,\n                -- offer\n                id as OfferId,\n                Name,\n                OfferCode,\n                StoreCode,\n                Description,\n                FullDescription,\n                OfferType,\n                ImageUrl,\n                OfferSegment,\n                MemberAccount,\n                Provider,\n                MemberAccountLoadQuantity,\n                DiscountPricing,\n                Size,\n                Disclaimer,\n                StartDate,\n                EndDate,\n                PromotionStartDate,\n                PromotionEndDate,\n                IsActive,\n                -- product\n                ProductCode,\n                PrimaryUPC,\n                Movement,\n                DepartmentCode1,\n                DepartmentCode2,\n                DepartmentCode3,\n                DepartmentName1,\n                DepartmentName2,\n                DepartmentName3,\n                IsOnSale,\n                1 -- single product default\n            from CTE_Offer main where rn = 1;\n\n            /* --------------------------------------------------------------------------------- */\n            /* For Product with many different UPC, set IsSingleProduct to TRUE */\n            /* --------------------------------------------------------------------------------- */\n            delete from Rs_Schema.tmp_table;\n            insert into Rs_Schema.tmp_table (\n                select *\n                from Rs_Schema.OfferStagingRuning as main\n                where (select count(*)\n                    from Rs_Schema.OfferStagingRuning sub\n                    where sub.ProgramCode = main.ProgramCode\n                        and sub.OfferId = main.OfferId\n                        and sub.StoreCode = main.StoreCode\n                        and sub.PrimaryUPC <> main.PrimaryUPC) > 0);\n\n            update Rs_Schema.tmp_table\n            set isSingleProduct = 0;\n\n            delete from Rs_Schema.OfferStagingRuning where id in (select id from rs_schema.tmp_table);\n\n            insert into Rs_Schema.OfferStagingRuning\n            select * from rs_schema.tmp_table;\n\n\n            if ($is_change = true) then\n                insert into Rs_Schema.OfferStagingLog (TransactionId, Action, ProgramCode, RunId, Description)\n                select $TransactionId,'Done Staged all offer',ProgramCode, RunId, 'Total: ' || count(*) || ' record'\n                from Rs_Schema.OfferStagingRuning group by ProgramCode, RunId;\n            else\n                insert into Rs_Schema.OfferStagingLog (TransactionId, Action, ProgramCode, RunId, Description)\n                select $TransactionId,'Done Staged Change via cdc',ProgramCode, RunId, 'Total: ' || count(*) || ' record'\n                from Rs_Schema.OfferStagingRuning group by ProgramCode, RunId;\n            end if;\n\n\n            /* --------------------------------------------------------------------------------- */\n            /* OfferStagingRuning_Available */\n            /* --------------------------------------------------------------------------------- */\n            delete\n            from RS_SCHEMA.OfferStagingRuning_Available main\n                using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine <> 'OFFER_RECOMMENDATIONS') staged\n            where main.ProgramCode in (select ProgramCode from RS_SCHEMA.program_changes Where TransactionId = $TransactionId)\n                  and main.RunId = staged.RunId (+)\n            and main.OfferId = staged.OfferId (+)\n            and staged.Id is null;\n\n            merge into RS_SCHEMA.OfferStagingRuning_Available main\n            using (\n                select RunId, ProgramEngine, ProgramCode, OfferId, OfferCode, MemberAccount\n                from RS_SCHEMA.OfferStagingRuning\n                where ProgramEngine <> 'OFFER_RECOMMENDATIONS'\n                group by RunId, ProgramEngine, ProgramCode, OfferId, OfferCode, MemberAccount\n            ) staged\n                on staged.RunId = main.RunId \n                   and staged.OfferId = main.OfferId\n            when matched then update set\n                OfferCode =  staged.OfferCode,\n                MemberAccount =  staged.MemberAccount\n\n            when not matched then insert\n                (RunId, ProgramEngine, ProgramCode,OfferId, OfferCode, MemberAccount)\n            values\n                (RunId, ProgramEngine, ProgramCode,OfferId, OfferCode, MemberAccount);\n\n            insert into Rs_Schema.OfferStagingLog (TransactionId, Action, ProgramCode, RunId, Description)\n            select $TransactionId, 'Done modify OfferStagingRuning_Available', staging.ProgramCode, staging.RunId, 'Total: ' || count(*) || ' record'\n            from Rs_Schema.OfferStagingRuning_Available staging\n            group by staging.ProgramCode, staging.RunId;\n\n            /* --------------------------------------------------------------------------------- */\n            /* OfferStagingRuning_RECO */\n            /* --------------------------------------------------------------------------------- */\n            delete from RS_SCHEMA.OfferStagingRuning_RECO main\n            using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine = 'OFFER_RECOMMENDATIONS') staged\n                where \n                    main.ProgramCode in (select ProgramCode from  RS_SCHEMA.program_changes Where TransactionId = $TransactionId)\n                    and main.Id = staged.Id(+)\n                    and staged.Id is null;\n\n            merge into RS_SCHEMA.OfferStagingRuning_RECO main\n            using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine  = 'OFFER_RECOMMENDATIONS' ) staged\n                on staged.Id = main.Id\n            when matched then update set\n                                        Offercode = staged.Offercode,\n                                        StartDate = staged.StartDate,\n                                        ProductCode = staged.ProductCode,\n                                        Movement = staged.Movement,\n                                        IsOnSale = staged.IsOnSale,\n                                        IsSingleProduct = staged.IsSingleProduct,\n                                        DepartmentCode1 = staged.DepartmentCode1,\n                                        DepartmentCode2 = staged.DepartmentCode2,\n                                        DepartmentCode3 = staged.DepartmentCode3,\n                                        DepartmentName1 = staged.DepartmentName1,\n                                        DepartmentName2 = staged.DepartmentName2,\n                                        DepartmentName3 = staged.DepartmentName3\n            when not matched then insert\n                (\n                    Id, Offercode, ProgramCode, RunId, StoreCode, OfferId, StartDate, ProductCode, PrimaryUPC, Movement, IsOnSale, IsSingleProduct,\n                    DepartmentCode1, DepartmentCode2, DepartmentCode3, DepartmentName1, DepartmentName2, DepartmentName3\n                )\n            values\n                (\n                    Id, Offercode, ProgramCode, RunId, StoreCode, OfferId, StartDate, ProductCode, PrimaryUPC, Movement, IsOnSale, IsSingleProduct,\n                    DepartmentCode1, DepartmentCode2, DepartmentCode3, DepartmentName1, DepartmentName2, DepartmentName3\n                );\n\n            insert into Rs_Schema.OfferStagingLog (TransactionId, Action, ProgramCode, RunId, Description)\n            select $TransactionId, 'Done modify OfferStagingRuning_RECO', staging.ProgramCode, staging.RunId, 'Total: ' || count(*) || ' record'\n            from Rs_Schema.OfferStagingRuning_RECO staging group by staging.ProgramCode, staging.RunId;\n\n            /* --------------------------------------------------------------------------------- */\n            /* OfferStagingRuning_Mass */\n            /* --------------------------------------------------------------------------------- */\n            delete from RS_SCHEMA.OfferStagingRuning_Mass main\n            using (\n                select *\n                from RS_SCHEMA.OfferStagingRuning\n                where ProgramEngine in ('MASS','HEALTH','AUTODEAL','CONTINUITY')\n            ) as staged\n            where\n                main.ProgramCode in (select ProgramCode from RS_SCHEMA.program_changes where TransactionId = $TransactionId)\n                and main.Id = staged.Id(+)\n                and staged.Id is null;\n\n            merge into RS_SCHEMA.OfferStagingRuning_Mass main\n            using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine in ('MASS','HEALTH','AUTODEAL','CONTINUITY') and OfferType = 0) staged\n                on  staged.Id = main.Id\n            when matched then update set\n                                        OfferCode = staged.OfferCode,\n                                        Name = staged.Name,\n                                        StartDate = staged.StartDate,\n                                        ProductCode = staged.ProductCode,\n                                        DepartmentName1 = staged.DepartmentName1,\n                                        DiscountPricing = staged.DiscountPricing\n            when not matched then insert\n                (Id,ProgramCode,RunId,OfferId,OfferCode,Name,StartDate,ProductCode,PrimaryUPC,DepartmentName1,DiscountPricing)\n            values\n                (Id,ProgramCode,RunId,OfferId,OfferCode,Name,StartDate,ProductCode,PrimaryUPC,DepartmentName1,DiscountPricing);\n\n            insert into Rs_Schema.OfferStagingLog (TransactionId, Action, ProgramCode, RunId, Description)\n            select $TransactionId, 'Done modify OfferStagingRuning_Mass', staging.ProgramCode, staging.RunId, 'Total: ' || count(*) || ' record'\n            from Rs_Schema.OfferStagingRuning_Mass staging group by staging.ProgramCode, staging.RunId;\n\n            /* --------------------------------------------------------------------------------- */\n            /* OfferStagingRuning_TargetStore */\n            /* --------------------------------------------------------------------------------- */\n            delete from RS_SCHEMA.OfferStagingRuning_TargetStore main\n            using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine = 'TARGET_STORE') staged\n            where\n                main.ProgramCode in (select ProgramCode from  RS_SCHEMA.program_changes Where TransactionId = $TransactionId)\n                and main.Id = staged.Id(+)\n                and staged.Id is null;\n\n            merge into RS_SCHEMA.OfferStagingRuning_TargetStore main\n            using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine = 'TARGET_STORE' ) staged\n                on  staged.Id = main.Id\n            when matched then update set\n                                        OfferCode = staged.OfferCode,\n                                        Name = staged.Name,\n                                        StartDate = staged.StartDate,\n                                        ProductCode = staged.ProductCode,\n                                        DepartmentName1 = staged.DepartmentName1,\n                                        DiscountPricing = staged.DiscountPricing\n            when not matched then insert\n                (Id, ProgramCode, StoreCode, RunId, OfferId, OfferCode, Name, StartDate, ProductCode, PrimaryUPC, DepartmentName1, DiscountPricing)\n            values\n                (Id, ProgramCode, StoreCode, RunId, OfferId, OfferCode, Name, StartDate, ProductCode, PrimaryUPC, DepartmentName1, DiscountPricing);\n\n            insert into Rs_Schema.OfferStagingLog (TransactionId, Action, ProgramCode, RunId, Description)\n            select $TransactionId, 'Done modify OfferStagingRuning_TargetStore', staging.ProgramCode, staging.RunId, 'Total: ' || count(*) || ' record'\n            from Rs_Schema.OfferStagingRuning_TargetStore staging group by staging.ProgramCode, staging.RunId;\n\n            /* --------------------------------------------------------------------------------- */\n            /* OfferStagingRuning_TargetUser */\n            /* --------------------------------------------------------------------------------- */\n            delete from RS_SCHEMA.OfferStagingRuning_TargetUser main\n            using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine in ('TARGET_USER','AUTODEAL')) AS staged\n                where\n                main.ProgramCode in (select ProgramCode from  RS_SCHEMA.program_changes Where TransactionId = $TransactionId)\n                and main.Id = staged.Id(+)\n                and staged.Id is null;\n\n            merge into RS_SCHEMA.OfferStagingRuning_TargetUser main\n            using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine in ('TARGET_USER','AUTODEAL') and OfferType = 2) staged\n                on  staged.Id = main.Id\n            when matched then update set\n                                        OfferCode = staged.OfferCode,\n                                        Name = staged.Name,\n                                        StartDate = staged.StartDate,\n                                        ProductCode = staged.ProductCode,\n                                        DepartmentName1 = staged.DepartmentName1,\n                                        DiscountPricing = staged.DiscountPricing\n            when not matched then insert\n            (Id,ProgramCode,StoreCode,RunId,OfferId,OfferCode,Name,StartDate,ProductCode,PrimaryUPC,DepartmentName1,DiscountPricing)\n            values\n                (Id,ProgramCode,StoreCode,RunId,OfferId,OfferCode,Name,StartDate,ProductCode,PrimaryUPC,DepartmentName1,DiscountPricing);\n\n            insert into Rs_Schema.OfferStagingLog (TransactionId, Action, ProgramCode, RunId, Description)\n            select $TransactionId, 'Done modify OfferStagingRuning_TargetUser', staging.ProgramCode, staging.RunId, 'Total: ' || count(*) || ' record'\n            from Rs_Schema.OfferStagingRuning_TargetUser staging group by staging.ProgramCode, staging.RunId;\n\n            /* --------------------------------------------------------------------------------- */\n            /* OfferStagingRuning_NewEnrollment */\n            /* --------------------------------------------------------------------------------- */\n            delete from RS_SCHEMA.OfferStagingRuning_NewEnrollment main\n            using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine = 'NEW_ENROLLMENT') staged\n                where\n                main.ProgramCode in (select ProgramCode from RS_SCHEMA.program_changes Where TransactionId = $TransactionId)\n                and main.Id = staged.Id(+)\n                and staged.Id is null;\n\n            merge into RS_SCHEMA.OfferStagingRuning_NewEnrollment main\n            using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine = 'NEW_ENROLLMENT' ) staged\n                on  staged.Id = main.Id\n            when matched then update set\n                                        OfferCode = staged.OfferCode,\n                                        Name = staged.Name,\n                                        StartDate = staged.StartDate,\n                                        ProductCode = staged.ProductCode,\n                                        DepartmentName1 = staged.DepartmentName1,\n                                        DiscountPricing = staged.DiscountPricing,\n                                        IsActive =  staged.IsActive\n            when not matched then insert\n                (Id, ProgramCode, RunId, OfferId, OfferCode, Name, StartDate, ProductCode, PrimaryUPC, DepartmentName1, DiscountPricing, IsActive)\n            values\n                (Id, ProgramCode, RunId, OfferId, OfferCode, Name, StartDate, ProductCode, PrimaryUPC, DepartmentName1, DiscountPricing, IsActive);\n\n            insert into Rs_Schema.OfferStagingLog (TransactionId, Action, ProgramCode, RunId, Description)\n            select $TransactionId, 'Done modify OfferStagingRuning_NewEnrollment', staging.ProgramCode, staging.RunId, 'Total: ' || count(*) || ' record'\n            from Rs_Schema.OfferStagingRuning_NewEnrollment staging group by staging.ProgramCode, staging.RunId;\n\n            /* --------------------------------------------------------------------------------- */\n            /* OfferStagingRuning_NewEnrollment */\n            /* --------------------------------------------------------------------------------- */\n            delete from RS_SCHEMA.OfferStagingRuning_TargetList main\n            using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine = 'TARGET_LIST') staged\n                where\n                    main.ProgramCode in (select ProgramCode from RS_SCHEMA.program_changes Where TransactionId = $TransactionId)\n                    and main.Id = staged.Id(+)\n                    and staged.Id is null;\n\n            merge into RS_SCHEMA.OfferStagingRuning_TargetList main\n            using (select * from RS_SCHEMA.OfferStagingRuning where ProgramEngine = 'TARGET_LIST') staged\n                on staged.Id = main.Id\n            when matched then update set\n                                        OfferCode = staged.OfferCode,\n                                        Name = staged.Name,\n                                        StartDate = staged.StartDate,\n                                        ProductCode = staged.ProductCode,\n                                        DepartmentName1 = staged.DepartmentName1,\n                                        DiscountPricing = staged.DiscountPricing,\n                                        IsActive =  staged.IsActive\n            when not matched then insert\n                (Id, ProgramCode, RunId, OfferId, OfferCode, Name, StartDate, ProductCode, PrimaryUPC, DepartmentName1, DiscountPricing, IsActive)\n            values\n                (Id, ProgramCode, RunId, OfferId, OfferCode, Name, StartDate, ProductCode, PrimaryUPC, DepartmentName1, DiscountPricing, IsActive);\n\n\n            insert into Rs_Schema.OfferStagingLog (TransactionId, Action, ProgramCode, RunId, Description)\n            select $TransactionId, 'Done modify OfferStagingRuning_TargetList', staging.ProgramCode, staging.RunId, 'Total: ' || count(*) || ' record'\n            from Rs_Schema.OfferStagingRuning_TargetList staging\n            group by staging.ProgramCode, staging.RunId;\n\n            /* --------------------------------------------------------------------------------- */\n            /* Finish staging runs, set status to Staged */\n            /* --------------------------------------------------------------------------------- */\n            update rs_schema.offerprogramruns set stagingstatus = 2\n            where status = 1 and programId in (select Id from RS_SCHEMA.program_changes);\n\n        end if;\n\n    /* --------------------------------------------------------------------------------- */\n    /* CDC for CustomerToOffer */\n    /* --------------------------------------------------------------------------------- */\n    if (exists(select top 1 1 from rs_schema.CustomerToOffer_check)) then\n        set is_index = TRUE;\n\n        insert into Rs_Schema.CustomerToOffer_delta\n              (CUSTOMERCODE, OFFERCODE, RECORANK, PRODUCTCODE, RECOTYPE, PROMOTIONCODE, CAMPAIGNCODE, SOURCE, transactionId, CreatedDate, METADATA$ACTION, METADATA$ISUPDATE, METADATA$ROW_ID)\n        select CUSTOMERCODE, OFFERCODE, RECORANK, PRODUCTCODE, RECOTYPE, PROMOTIONCODE, CAMPAIGNCODE, SOURCE, $TransactionId ,$Now, METADATA$ACTION, METADATA$ISUPDATE, METADATA$ROW_ID\n            from rs_schema.CustomerToOffer_check\n        where Metadata$Action != 'DELETE' or (Metadata$Action = 'DELETE' and Metadata$IsUpdate = FALSE);\n\n    end if;\n\n    /* --------------------------------------------------------------------------------- */\n    /* CDC for CustomerToProduct */\n    /* --------------------------------------------------------------------------------- */\n    if (exists(select top 1 1 from rs_schema.CustomerToProduct_check)) then\n        set is_index = TRUE;\n\n        insert into Rs_Schema.CustomerToProduct_delta \n              (CUSTOMERCODE, PRODUCTCODE, RECORANK, RECOTYPE, MODELNAME, PROMOTIONCODE, CAMPAIGNCODE, SOURCE, transactionId, CreatedDate, METADATA$ACTION, METADATA$ISUPDATE, METADATA$ROW_ID)\n        select CUSTOMERCODE, PRODUCTCODE, RECORANK, RECOTYPE, MODELNAME, PROMOTIONCODE, CAMPAIGNCODE, SOURCE, $TransactionId , $Now, METADATA$ACTION, METADATA$ISUPDATE, METADATA$ROW_ID\n            from rs_schema.CustomerToProduct_check\n        where Metadata$Action != 'DELETE' or (Metadata$Action = 'DELETE' and Metadata$IsUpdate = FALSE);\n    end if;\n\n    res := (select $is_change as is_change, $is_index as is_index, $is_change_all as is_change_all);\n    return table(res);\nend;\n","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"If is stage data - send mail","type":"IfCondition","dependsOn":[{"activity":"If is index - cdc change","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"expression":{"value":"@equals(activity('get cdc offer or program').output.resultSets[sub(int(activity('get cdc offer or program').output.resultSetCount),1)].rows[0].IS_CHANGE,true)","type":"Expression"},"ifTrueActivities":[{"name":"Execute Send log","type":"ExecutePipeline","dependsOn":[],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_send_mail_stage_offer","type":"PipelineReference"},"waitOnCompletion":false,"parameters":{"TransactionId":{"value":"@variables('TransactionId')","type":"Expression"}}}}]}},{"name":"If is index - cdc change","type":"IfCondition","dependsOn":[{"activity":"Get CDC change","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"expression":{"value":"@equals(activity('get cdc offer or program').output.resultSets[sub(int(activity('get cdc offer or program').output.resultSetCount),1)].rows[0].IS_INDEX,true)","type":"Expression"},"ifTrueActivities":[{"name":"Invoke next","type":"ExecutePipeline","dependsOn":[],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_stage_2_offerstagingruning_delta_sf_2_sql","type":"PipelineReference"},"waitOnCompletion":false,"parameters":{"TransactionId":{"value":"@variables('TransactionId')","type":"Expression"},"IsStageAllOffer":{"value":"@{activity('get cdc offer or program').output.resultSets[sub(int(activity('get cdc offer or program').output.resultSetCount),1)].rows[0].IS_CHANGE_ALL}","type":"Expression"},"IsStage":{"value":"@{activity('get cdc offer or program').output.resultSets[sub(int(activity('get cdc offer or program').output.resultSetCount),1)].rows[0].IS_CHANGE}","type":"Expression"}}}}]}},{"name":"Execute Fail","type":"ExecutePipeline","dependsOn":[{"activity":"If is stage data - send mail","dependencyConditions":["Failed","Skipped"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Failed_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{}}},{"name":"Fail","type":"Fail","dependsOn":[{"activity":"Execute Fail","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"message":"step failed","errorCode":"112"}},{"name":"Get CDC change","type":"Script","dependsOn":[{"activity":"get cdc offer or program","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"NonQuery","text":"truncate table Rs_Schema.Offerstagingruning_mass_delta;\r\ntruncate table Rs_Schema.Offerstagingruning_targetstore_delta;\r\ntruncate table Rs_Schema.Offerstagingruning_targetuser_delta;\r\ntruncate table Rs_Schema.Offerstagingruning_targetlist_delta;\r\ntruncate table Rs_Schema.Offerstagingruning_newenrollment_delta;\r\ntruncate table Rs_Schema.Offerstagingruning_Reco_delta;\r\ntruncate table Rs_Schema.Offerstagingruning_available_delta;\r\ntruncate table Rs_Schema.OfferProgramruns_delta;\r\n\r\ninsert into Rs_Schema.Offerstagingruning_mass_delta\r\nselect * from Rs_Schema.offerstagingruning_mass_check\r\nwhere Metadata$Action != 'DELETE' or (Metadata$Action = 'DELETE' and Metadata$IsUpdate = FALSE);\r\n\r\ninsert into Rs_Schema.Offerstagingruning_targetstore_delta\r\nselect * from Rs_Schema.offerstagingruning_targetstore_check\r\nwhere Metadata$Action != 'DELETE' or (Metadata$Action = 'DELETE' and Metadata$IsUpdate = FALSE);\r\n\r\ninsert into Rs_Schema.Offerstagingruning_targetuser_delta\r\nselect * from Rs_Schema.offerstagingruning_targetuser_check\r\nwhere Metadata$Action != 'DELETE' or (Metadata$Action = 'DELETE' and Metadata$IsUpdate = FALSE);\r\n\r\ninsert into Rs_Schema.Offerstagingruning_targetlist_delta\r\nselect * from Rs_Schema.offerstagingruning_targetlist_check\r\nwhere Metadata$Action != 'DELETE' or (Metadata$Action = 'DELETE' and Metadata$IsUpdate = FALSE);\r\n\r\ninsert into Rs_Schema.Offerstagingruning_newenrollment_delta\r\nselect * from Rs_Schema.offerstagingruning_newenrollment_check\r\nwhere Metadata$Action != 'DELETE' or (Metadata$Action = 'DELETE' and Metadata$IsUpdate = FALSE);\r\n\r\ninsert into Rs_Schema.Offerstagingruning_Reco_delta\r\nselect * from Rs_Schema.offerstagingruning_reco_check\r\nwhere Metadata$Action != 'DELETE' or (Metadata$Action = 'DELETE' and Metadata$IsUpdate = FALSE);\r\n\r\ninsert into Rs_Schema.Offerstagingruning_available_delta\r\nselect * from Rs_Schema.offerstagingruning_available_check\r\nwhere Metadata$Action != 'DELETE' or (Metadata$Action = 'DELETE' and Metadata$IsUpdate = FALSE);\r\n\r\ninsert into Rs_Schema.OfferProgramruns_delta\r\nselect * from Rs_Schema.OfferProgramruns_check\r\nwhere Metadata$Action != 'DELETE' or (Metadata$Action = 'DELETE' and Metadata$IsUpdate = FALSE);"}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Rebuild Streams","type":"Script","dependsOn":[{"activity":"Set TransactionId","dependencyConditions":["Succeeded"]},{"activity":"Set currentDate","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"NonQuery","text":"create or replace stream Rs_Schema.OfferStagingRuning_mass_check          on table Rs_Schema.OfferStagingRuning_mass;\r\ncreate or replace stream Rs_Schema.OfferStagingRuning_targetstore_check   on table Rs_Schema.OfferStagingRuning_targetstore;\r\ncreate or replace stream Rs_Schema.OfferStagingRuning_targetuser_check    on table Rs_Schema.OfferStagingRuning_targetuser;\r\ncreate or replace stream Rs_Schema.OfferStagingRuning_targetlist_check    on table Rs_Schema.OfferStagingRuning_targetlist;\r\ncreate or replace stream Rs_Schema.OfferStagingRuning_newenrollment_check on table Rs_Schema.OfferStagingRuning_newenrollment;\r\ncreate or replace stream Rs_Schema.OfferStagingRuning_reco_check          on table Rs_Schema.OfferStagingRuning_reco;\r\ncreate or replace stream Rs_Schema.OfferStagingRuning_available_check     on table Rs_Schema.OfferStagingRuning_available;\r\ncreate or replace stream Rs_Schema.OfferProgramRuns_check                 on table Rs_Schema.OfferProgramruns;"}],"scriptBlockExecutionTimeout":"02:00:00"}}],"policy":{"elapsedTimeMetric":{}},"variables":{"TransactionId":{"type":"String"},"CurrentDate":{"type":"String"},"ImportLog":{"type":"String"},"ImportLogTemp":{"type":"String"},"StreamSet_Upsert_Id":{"type":"String","defaultValue":"SandboxUne3ac7afd-a50f-46e0-a8fd-0719d9a0fd33"}},"folder":{"name":"Sandbox United/Offer/Staging_Offer"},"annotations":[]},"dependsOn":["[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Failed_V1')]","[concat(variables('factoryId'), '/pipelines/sandboxunited_send_mail_stage_offer')]","[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_stage_2_offerstagingruning_delta_sf_2_sql')]"]},{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_Message_Notification_Failed_V1')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Failed notitication V1","type":"WebActivity","dependsOn":[],"policy":{"timeout":"7.00:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"https://dev-etl-notification.azurewebsites.net:443/api/send-mail-v2/triggers/manual/invoke?api-version=2022-05-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dtvUizvpLpbvOZKtm5HTaEOw7gNX6iWsgPWLHMrdtZ4","method":"POST","headers":{},"body":{"value":"{\n   \"DataFactoryName\": '@{concat(' ',pipeline().DataFactory)}',\n   \"PipelineName\": '@{concat(' ',pipeline()?.TriggeredByPipelineName)}',\n   \"Subject\":  ' @{concat('[FAILED]❌ ',pipeline().parameters.Enviroment,' ',pipeline().parameters.Subject)}',\n   \"ErrorMessage\": '@{concat(' ',pipeline().parameters.Message)}',\n   \"EmailTo\": '@{concat(' ',pipeline().parameters.EmailTo)}',\n   \"output\": '@{concat(' ',pipeline().parameters.Output)}',\n   \"data\": '@{concat(' ',pipeline().parameters.Data)}'\n}","type":"Expression"}}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"Subject":{"type":"string"},"Message":{"type":"string","defaultValue":"Something is wrong!"},"EmailTo":{"type":"string","defaultValue":"thuy.n@stor.ai,tam.h@stor.ai"},"Output":{"type":"string"},"Data":{"type":"string"},"Enviroment":{"type":"string","defaultValue":"SandboxUnited"}},"folder":{"name":"Notification Form/SandboxUnited_Notification"},"annotations":[],"lastPublishTime":"2023-04-12T09:45:52Z"},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/sandboxunited_send_mail_stage_offer')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Execute Success","type":"ExecutePipeline","dependsOn":[{"activity":"Set close-tag table log","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Success_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{"Subject":"cdc change","Output":{"value":"@variables('ImportLog')","type":"Expression"}}}},{"name":"Get Import Log","type":"Lookup","dependsOn":[],"policy":{"timeout":"7.00:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","query":{"value":"select  Action, ProgramCode,RunId, Logtime, Description from rs_schema.offerstaginglog where TransactionId= '@{pipeline().parameters.TransactionId}'  order by logtime","type":"Expression"},"exportSettings":{"type":"SnowflakeExportCopyCommand"}},"dataset":{"referenceName":"SnowflakeTable_Uat2United_Offer_OfferStagingLog2","type":"DatasetReference","parameters":{}},"firstRowOnly":false}},{"name":"Process Log to Column","type":"ForEach","dependsOn":[{"activity":"Get Import Log","dependencyConditions":["Succeeded"]},{"activity":"Set open-tag table log","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"items":{"value":"@activity('Get Import Log').output.value","type":"Expression"},"isSequential":true,"activities":[{"name":"Set Column Table","type":"SetVariable","dependsOn":[],"policy":{"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"variableName":"ImportLogTemp","value":{"value":"@concat(variables('ImportLog'),'<tr>','<td>', item().LogTime, '</td>','<td>', item().Action, '</td>','<td>', item().ProgramCode, '</td>','<td>', item().RunId, '</td>','<td>', item().Description, '</td>','</tr>')","type":"Expression"}}},{"name":"Set To ImportLog","type":"SetVariable","dependsOn":[{"activity":"Set Column Table","dependencyConditions":["Completed"]}],"policy":{"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"variableName":"ImportLog","value":{"value":"@variables('ImportLogTemp')","type":"Expression"}}}]}},{"name":"Set close-tag table log","type":"SetVariable","dependsOn":[{"activity":"Process Log to Column","dependencyConditions":["Succeeded"]}],"policy":{"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"variableName":"ImportLog","value":{"value":"@concat(variables('ImportLogTemp'),'</table>')","type":"Expression"}}},{"name":"Set open-tag table log","type":"SetVariable","dependsOn":[],"policy":{"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"variableName":"ImportLog","value":"<table><tr><th>Time</th><th>Action</th><th>ProgramCode</th><th>RunId</th><th>Description</th></tr>"}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"TransactionId":{"type":"string"}},"variables":{"ImportLog":{"type":"String"},"ImportLogTemp":{"type":"String"}},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"lastPublishTime":"2023-04-12T09:45:54Z"},"dependsOn":["[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Success_V1')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_Uat2United_Offer_OfferStagingLog2')]"]},{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_stage_2_offerstagingruning_delta_sf_2_sql')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Available Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_Available_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"PROGRAMENGINE","type":"String"},"sink":{"name":"ProgramEngine","type":"String"}},{"source":{"name":"MEMBERACCOUNT","type":"String"},"sink":{"name":"MemberAccount","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Available_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Available_Delta","type":"DatasetReference","parameters":{}}]},{"name":"Mass Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_Mass_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"NAME","type":"String"},"sink":{"name":"Name","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DISCOUNTPRICING","type":"String"},"sink":{"name":"DiscountPricing","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Mass_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Mass_Delta","type":"DatasetReference","parameters":{}}]},{"name":"TargetStore Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_TargetStore_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"STORECODE","type":"String"},"sink":{"name":"StoreCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"NAME","type":"String"},"sink":{"name":"Name","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DISCOUNTPRICING","type":"String"},"sink":{"name":"DiscountPricing","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetStore_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetStore_Delta","type":"DatasetReference","parameters":{}}]},{"name":"TargetList Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_TargetList_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"NAME","type":"String"},"sink":{"name":"Name","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DISCOUNTPRICING","type":"String"},"sink":{"name":"DiscountPricing","type":"String"}},{"source":{"name":"ISACTIVE","type":"String"},"sink":{"name":"IsActive","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetList_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetList_Delta","type":"DatasetReference","parameters":{}}]},{"name":"TargetUser Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_TargetUser_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"STORECODE","type":"String"},"sink":{"name":"StoreCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"NAME","type":"String"},"sink":{"name":"Name","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DISCOUNTPRICING","type":"String"},"sink":{"name":"DiscountPricing","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetUser_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetUser_Delta","type":"DatasetReference","parameters":{}}]},{"name":"NewEnrollment Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_NewEnrollment_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"Guid"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"NAME","type":"String"},"sink":{"name":"Name","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DISCOUNTPRICING","type":"String"},"sink":{"name":"DiscountPricing","type":"String"}},{"source":{"name":"ISACTIVE","type":"String"},"sink":{"name":"IsActive","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_NewEnrollment_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_NewEnrollment_Delta","type":"DatasetReference","parameters":{}}]},{"name":"RECO Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferStagingRuning_RECO_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"PROGRAMCODE","type":"String"},"sink":{"name":"ProgramCode","type":"String"}},{"source":{"name":"RUNID","type":"String"},"sink":{"name":"RunId","type":"String"}},{"source":{"name":"STORECODE","type":"String"},"sink":{"name":"StoreCode","type":"String"}},{"source":{"name":"OFFERID","type":"String"},"sink":{"name":"OfferId","type":"Guid"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"PRIMARYUPC","type":"String"},"sink":{"name":"PrimaryUPC","type":"String"}},{"source":{"name":"MOVEMENT","type":"String"},"sink":{"name":"Movement","type":"String"}},{"source":{"name":"ISONSALE","type":"String"},"sink":{"name":"IsOnSale","type":"String"}},{"source":{"name":"ISSINGLEPRODUCT","type":"String"},"sink":{"name":"IsSingleProduct","type":"String"}},{"source":{"name":"DEPARTMENTCODE1","type":"String"},"sink":{"name":"DepartmentCode1","type":"String"}},{"source":{"name":"DEPARTMENTNAME1","type":"String"},"sink":{"name":"DepartmentName1","type":"String"}},{"source":{"name":"DEPARTMENTCODE2","type":"String"},"sink":{"name":"DepartmentCode2","type":"String"}},{"source":{"name":"DEPARTMENTNAME2","type":"String"},"sink":{"name":"DepartmentName2","type":"String"}},{"source":{"name":"DEPARTMENTCODE3","type":"String"},"sink":{"name":"DepartmentCode3","type":"String"}},{"source":{"name":"DEPARTMENTNAME3","type":"String"},"sink":{"name":"DepartmentName3","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_RECO_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_RECO_Delta","type":"DatasetReference","parameters":{}}]},{"name":"Offer Program Runs","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_OfferProgramRuns_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"ID","type":"String"},"sink":{"name":"Id","type":"String"}},{"source":{"name":"PROGRAMID","type":"String"},"sink":{"name":"ProgramId","type":"String"}},{"source":{"name":"STARTDATE","type":"String"},"sink":{"name":"StartDate","type":"String"}},{"source":{"name":"ENDDATE","type":"String"},"sink":{"name":"EndDate","type":"String"}},{"source":{"name":"STATUS","type":"String"},"sink":{"name":"Status","type":"String"}},{"source":{"name":"EXECUTEDTIME","type":"String"},"sink":{"name":"ExecutedTime","type":"String"}},{"source":{"name":"CREATEDDATE","type":"String"},"sink":{"name":"CreatedDate","type":"String"}},{"source":{"name":"CREATEDBY","type":"String"},"sink":{"name":"CreatedBy","type":"String"}},{"source":{"name":"TOTALRESULT","type":"String"},"sink":{"name":"TotalResult","type":"String"}},{"source":{"name":"METADATA","type":"String"},"sink":{"name":"Metadata","type":"String"}},{"source":{"name":"SCHEDULEDTIME","type":"String"},"sink":{"name":"ScheduledTime","type":"String"}},{"source":{"name":"MODIFIEDBY","type":"String"},"sink":{"name":"ModifiedBy","type":"String"}},{"source":{"name":"MODIFIEDDATE","type":"String"},"sink":{"name":"ModifiedDate","type":"String"}},{"source":{"name":"ISDELETED","type":"String"},"sink":{"name":"IsDeleted","type":"String"}},{"source":{"name":"STAGINGSTATUS","type":"String"},"sink":{"name":"StagingStatus","type":"String"}},{"source":{"name":"LISTID","type":"String"},"sink":{"name":"ListId","type":"String"}},{"source":{"name":"CANCELLEDDATE","type":"String"},"sink":{"name":"CancelledDate","type":"String"}},{"source":{"name":"PREVIEWSTARTTIME","type":"String"},"sink":{"name":"PreviewStartTime","type":"String"}},{"source":{"name":"PREVIEWENDTIME","type":"String"},"sink":{"name":"PreviewEndTime","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"String"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_OfferProgramRuns_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_OfferProgramRuns_Delta","type":"DatasetReference","parameters":{}}]},{"name":"CustomerToOffer Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","query":{"value":"select CUSTOMERCODE, OFFERCODE ,METADATA$ACTION, METADATA$ISUPDATE\nfrom RS_SCHEMA.CUSTOMERTOOFFER_DELTA  where transactionid ='@{pipeline().parameters.TransactionId}'\ngroup BY CUSTOMERCODE, OFFERCODE, METADATA$ACTION, METADATA$ISUPDATE\n\n","type":"Expression"},"exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":"truncate table StagingOffer_CustomerToOffer_Delta","writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"CUSTOMERCODE","type":"String"},"sink":{"name":"CustomerCode","type":"String"}},{"source":{"name":"OFFERCODE","type":"String"},"sink":{"name":"OfferCode","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_StagingCustomerToOffer_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_CustomerToOffer_Delta","type":"DatasetReference","parameters":{}}]},{"name":"CustomerToProduct Delta","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"SnowflakeSource","query":{"value":"select CUSTOMERCODE, PRODUCTCODE, RECORANK, RECOTYPE, MODELNAME, METADATA$ACTION, METADATA$ISUPDATE\nfrom RS_SCHEMA.CUSTOMERTOPRODUCT_DELTA  where transactionid ='@{pipeline().parameters.TransactionId}'\ngroup BY CUSTOMERCODE, PRODUCTCODE, RECORANK, RECOTYPE, MODELNAME, METADATA$ACTION, METADATA$ISUPDATE\n\n","type":"Expression"},"exportSettings":{"type":"SnowflakeExportCopyCommand"}},"sink":{"type":"SqlServerSink","preCopyScript":{"value":"truncate table StagingOffer_CustomerToProduct_Delta","type":"Expression"},"writeBehavior":"insert","sqlWriterUseTableLock":false},"enableStaging":true,"stagingSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}},"logSettings":{"enableCopyActivityLog":true,"copyActivityLogSettings":{"logLevel":"Warning","enableReliableLogging":false},"logLocationSettings":{"linkedServiceName":{"referenceName":"[parameters('AzureBlobStorage_SandboxUnited')]","type":"LinkedServiceReference"}}},"translator":{"type":"TabularTranslator","mappings":[{"source":{"name":"CUSTOMERCODE","type":"String"},"sink":{"name":"CustomerCode","type":"String"}},{"source":{"name":"PRODUCTCODE","type":"String"},"sink":{"name":"ProductCode","type":"String"}},{"source":{"name":"RECORANK","type":"Int64"},"sink":{"name":"RecoRank","type":"Int32"}},{"source":{"name":"RECOTYPE","type":"String"},"sink":{"name":"RecoType","type":"String"}},{"source":{"name":"MODELNAME","type":"String"},"sink":{"name":"ModelName","type":"String"}},{"source":{"name":"METADATA$ACTION","type":"String"},"sink":{"name":"Metadata$Action","type":"String"}},{"source":{"name":"METADATA$ISUPDATE","type":"Boolean"},"sink":{"name":"Metadata$IsUpdate","type":"Boolean"}}]}},"inputs":[{"referenceName":"SnowflakeTable_SandboxUnited_StagingCustomerToProduct_Delta","type":"DatasetReference","parameters":{}}],"outputs":[{"referenceName":"SqlServerTable_SandboxUnited_StagingOffer_CustomerToProduct_Delta","type":"DatasetReference","parameters":{}}]},{"name":"Offer Staging running","type":"Script","dependsOn":[{"activity":"TargetStore Delta","dependencyConditions":["Succeeded"]},{"activity":"TargetUser Delta","dependencyConditions":["Succeeded"]},{"activity":"TargetList Delta","dependencyConditions":["Succeeded"]},{"activity":"NewEnrollment Delta","dependencyConditions":["Succeeded"]},{"activity":"RECO Delta","dependencyConditions":["Succeeded"]},{"activity":"Mass Delta","dependencyConditions":["Succeeded"]},{"activity":"Available Delta","dependencyConditions":["Succeeded"]},{"activity":"Offer Program Runs","dependencyConditions":["Succeeded"]},{"activity":"CustomerToOffer Delta","dependencyConditions":["Succeeded"]},{"activity":"CustomerToProduct Delta","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('SqlServer_SandboxUnited_Offer')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"NonQuery","text":{"value":"-- Stage 4 - version 2.0.1\n\n---------------------------------------------------------------------------------------------------------------\n------- OfferStagingRuning_*\n---------------------------------------------------------------------------------------------------------------\n\n---------------------------------------------------------------------------------------------------------------\n--- Available\n---------------------------------------------------------------------------------------------------------------\n\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_Available\n    FROM OfferStagingRuning_Available main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Available_Delta] staging\n                  ON main.OfferId = staging.OfferId\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_Available\n    SET ProgramCode   = staging.ProgramCode\n      , RunId         = staging.RunId\n      , OfferCode     = staging.OfferCode\n      , ProgramEngine = staging.ProgramEngine\n      , MemberAccount = IIF(staging.MemberAccount = '', NULL, CONVERT(INT, staging.MemberAccount))\n    FROM OfferStagingRuning_Available main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Available_Delta] staging\n                  ON main.OfferId = staging.OfferId\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_Available (OfferId, ProgramCode, RunId, OfferCode, ProgramEngine, MemberAccount)\n    SELECT OfferId\n         , ProgramCode\n         , RunId\n         , OfferCode\n         , ProgramEngine\n         , IIF(MemberAccount = '', NULL, CONVERT(INT, MemberAccount))\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Available_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_Available AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND;\n\n\n---------------------------------------------------------------------------------------------------------------\n--- Mass\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_Mass\n    FROM OfferStagingRuning_Mass main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Mass_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_Mass\n    SET ProgramCode     = staging.ProgramCode\n      , OfferCode       = staging.OfferCode\n      , RunId           = staging.RunId\n      , OfferId         = staging.OfferId\n      , Name            = staging.Name\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , DepartmentName1 = staging.DepartmentName1\n      , DiscountPricing = staging.DiscountPricing\n    FROM OfferStagingRuning_Mass main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Mass_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_Mass ( Id, ProgramCode, OfferCode, RunId, OfferId, Name, StartDate, ProductCode\n                                        , PrimaryUPC, DepartmentName1, DiscountPricing)\n    SELECT Id\n         , ProgramCode\n         , OfferCode\n         , RunId\n         , OfferId\n         , Name\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , DepartmentName1\n         , DiscountPricing\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_Mass_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_Mass AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n---------------------------------------------------------------------------------------------------------------\n--- TargetStore\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_TargetStore\n    FROM OfferStagingRuning_TargetStore main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetStore_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_TargetStore\n    SET OfferCode       = staging.OfferCode\n      , ProgramCode     = staging.ProgramCode\n      , StoreCode       = staging.StoreCode\n      , RunId           = staging.RunId\n      , OfferId         = staging.OfferId\n      , Name            = staging.Name\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , DepartmentName1 = staging.DepartmentName1\n      , DiscountPricing = staging.DiscountPricing\n    FROM OfferStagingRuning_TargetStore main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetStore_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_TargetStore ( Id, OfferCode, ProgramCode, StoreCode, RunId, OfferId, Name, StartDate\n                                               , ProductCode, PrimaryUPC, DepartmentName1, DiscountPricing)\n    SELECT Id\n         , OfferCode\n         , ProgramCode\n         , StoreCode\n         , RunId\n         , OfferId\n         , Name\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , DepartmentName1\n         , DiscountPricing\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetStore_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_TargetStore AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n\n---------------------------------------------------------------------------------------------------------------\n--- TargetList\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_TargetList\n    FROM OfferStagingRuning_TargetList main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetList_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_TargetList\n    SET Id              = staging.Id\n      , OfferCode       = staging.OfferCode\n      , ProgramCode     = staging.ProgramCode\n      , RunId           = staging.RunId\n      , OfferId         = staging.OfferId\n      , Name            = staging.Name\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , DepartmentName1 = staging.DepartmentName1\n      , DiscountPricing = staging.DiscountPricing\n      , IsActive        = IIF(staging.IsActive = '', NULL, CONVERT(BIT, staging.IsActive))\n    FROM OfferStagingRuning_TargetList main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetList_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_TargetList ( Id, OfferCode, ProgramCode, RunId, OfferId, Name, StartDate, ProductCode\n                                              , PrimaryUPC, DepartmentName1, DiscountPricing, IsActive)\n    SELECT Id\n         , OfferCode\n         , ProgramCode\n         , RunId\n         , OfferId\n         , Name\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , DepartmentName1\n         , DiscountPricing\n         , IIF(IsActive = '', NULL, CONVERT(BIT, IsActive))\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetList_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_TargetList AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n\n---------------------------------------------------------------------------------------------------------------\n--- TargetUser\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_TargetUser\n    FROM OfferStagingRuning_TargetUser main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetUser_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_TargetUser\n    SET ProgramCode     = staging.ProgramCode\n      , StoreCode       = staging.StoreCode\n      , RunId           = staging.RunId\n      , OfferId         = staging.OfferId\n      , OfferCode       = staging.OfferCode\n      , Name            = staging.Name\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , DepartmentName1 = staging.DepartmentName1\n      , DiscountPricing = staging.DiscountPricing\n    FROM OfferStagingRuning_TargetUser main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetUser_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_TargetUser ( Id, ProgramCode, StoreCode, RunId, OfferId, OfferCode, Name, StartDate\n                                              , ProductCode, PrimaryUPC, DepartmentName1, DiscountPricing)\n    SELECT Id\n         , ProgramCode\n         , StoreCode\n         , RunId\n         , OfferId\n         , OfferCode\n         , Name\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , DepartmentName1\n         , DiscountPricing\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_TargetUser_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_TargetUser AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n\n---------------------------------------------------------------------------------------------------------------\n--- NewEnrollment\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_NewEnrollment\n    FROM OfferStagingRuning_NewEnrollment main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_NewEnrollment_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_NewEnrollment\n    SET ProgramCode     = staging.ProgramCode\n      , OfferCode       = staging.OfferCode\n      , RunId           = staging.RunId\n      , OfferId         = staging.OfferId\n      , Name            = staging.Name\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , DepartmentName1 = staging.DepartmentName1\n      , DiscountPricing = staging.DiscountPricing\n      , IsActive        = IIF(staging.IsActive = '', NULL, CONVERT(BIT, staging.IsActive))\n    FROM OfferStagingRuning_NewEnrollment main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_NewEnrollment_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_NewEnrollment ( Id, ProgramCode, OfferCode, RunId, OfferId, Name, StartDate\n                                                 , ProductCode\n                                                 , PrimaryUPC, DepartmentName1, DiscountPricing, IsActive)\n    SELECT Id\n         , ProgramCode\n         , OfferCode\n         , RunId\n         , OfferId\n         , Name\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , DepartmentName1\n         , DiscountPricing\n         , IIF(IsActive = '', NULL, CONVERT(BIT, IsActive))\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_NewEnrollment_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_NewEnrollment AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n\n---------------------------------------------------------------------------------------------------------------\n--- RECO\n---------------------------------------------------------------------------------------------------------------\nBEGIN\n    BEGIN TRANSACTION;\n\n    DELETE OfferStagingRuning_RECO\n    FROM OfferStagingRuning_RECO main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_RECO_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'DELETE'\n      AND Metadata$IsUpdate = 0;\n\n    UPDATE OfferStagingRuning_RECO\n    SET OfferCode       = staging.OfferCode\n      , ProgramCode     = staging.ProgramCode\n      , RunId           = staging.RunId\n      , StoreCode       = staging.StoreCode\n      , OfferId         = staging.OfferId\n      , StartDate       = IIF(staging.StartDate = '', NULL, CONVERT(DATETIME, staging.StartDate))\n      , ProductCode     = staging.ProductCode\n      , PrimaryUPC      = staging.PrimaryUPC\n      , Movement        = IIF(staging.Movement = '', NULL, CONVERT(INT, staging.Movement))\n      , IsOnSale        = IIF(staging.IsOnSale = '', NULL, CONVERT(BIT, staging.IsOnSale))\n      , IsSingleProduct = IIF(staging.IsSingleProduct = '', NULL, CONVERT(BIT, staging.IsSingleProduct))\n      , DepartmentCode1 = staging.DepartmentCode1\n      , DepartmentName1 = staging.DepartmentName1\n      , DepartmentCode2 = staging.DepartmentCode2\n      , DepartmentName2 = staging.DepartmentName2\n      , DepartmentCode3 = staging.DepartmentCode3\n      , DepartmentName3 = staging.DepartmentName3\n    FROM OfferStagingRuning_RECO main\n             JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_RECO_Delta] staging\n                  ON main.Id = staging.Id\n    WHERE Metadata$Action = 'INSERT';\n\n    INSERT INTO OfferStagingRuning_RECO ( Id, OfferCode, ProgramCode, RunId, StoreCode, OfferId, StartDate\n                                        , ProductCode, PrimaryUPC, Movement, IsOnSale, IsSingleProduct\n                                        , DepartmentCode1, DepartmentName1, DepartmentCode2, DepartmentName2\n                                        , DepartmentCode3, DepartmentName3)\n    SELECT Id\n         , OfferCode\n         , ProgramCode\n         , RunId\n         , StoreCode\n         , OfferId\n         , IIF(StartDate = '', NULL, CONVERT(DATETIME, StartDate))\n         , ProductCode\n         , PrimaryUPC\n         , IIF(Movement = '', NULL, CONVERT(INT, Movement))\n         , IIF(IsOnSale = '', NULL, CONVERT(BIT, IsOnSale))\n         , IIF(IsSingleProduct = '', NULL, CONVERT(BIT, IsSingleProduct))\n         , DepartmentCode1\n         , DepartmentName1\n         , DepartmentCode2\n         , DepartmentName2\n         , DepartmentCode3\n         , DepartmentName3\n    FROM [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferStagingRuning_RECO_Delta] AS staging\n    WHERE Metadata$Action = 'INSERT'\n      AND NOT EXISTS(SELECT 1\n                     FROM OfferStagingRuning_RECO AS main\n                     WHERE main.OfferId = staging.OfferId);\n\n    COMMIT TRANSACTION;\nEND\n\n\n---------------------------------------------------------------------------------------------------------------\n------- OfferProgramRuns\n---------------------------------------------------------------------------------------------------------------\nUPDATE OfferProgramruns\nSET status        = staging.status\n  , stagingstatus = staging.stagingstatus\nFROM OfferProgramruns main\n         JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_OfferProgramruns_Delta] staging ON main.Id = staging.Id\nWHERE Metadata$Action = 'INSERT'\n  AND Metadata$IsUpdate = 1;\n\n---------------------------------------------------------------------------------------------------------------\n------- CustomerToOffer\n---------------------------------------------------------------------------------------------------------------\nDELETE CustomerToOffer\nFROM CustomerToOffer main\n         JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_CustomerToOffer_Delta] staging\n              ON main.OfferCode = staging.OfferCode AND main.CustomerCode = staging.CustomerCode\nWHERE Metadata$Action = 'DELETE'\n  AND Metadata$IsUpdate = 0;\n\nINSERT INTO CustomerToOffer (OfferCode, CustomerCode)\nSELECT staging.OfferCode, staging.CustomerCode\nFROM [Sandbox-UnitedStaging].dbo.[StagingOffer_CustomerToOffer_Delta] staging\n         LEFT JOIN CustomerToOffer main\n                   ON main.OfferCode = staging.OfferCode AND main.CustomerCode = staging.CustomerCode\nWHERE Metadata$Action = 'INSERT'\n  AND Metadata$IsUpdate = 0\n  AND main.OfferCode IS NULL;\n\n\n-- DROP INDEX [NonClusteredIndex-20200807-144413-CustomerCode] ON [CustomerToProduct];\n-- DROP INDEX [NonClusteredIndex-20200807-150823-ProductCode] ON [CustomerToProduct];\n-- DROP INDEX [NonClusteredIndex-20210609-225408-RecoRank] ON [CustomerToProduct];\n--\n-- ALTER TABLE [CustomerToProduct]\n--     DROP CONSTRAINT PK_CustomerToOffer;\n--\n-- CREATE INDEX [NonClusteredIndex-20200807-144413-CustomerCode] ON [CustomerToProduct] (CustomerCode);\n-- CREATE INDEX [NonClusteredIndex-20200807-150823-ProductCode] ON [CustomerToProduct] (ProductCode);\n-- CREATE INDEX [NonClusteredIndex-20210609-225408-RecoRank] ON [CustomerToProduct] (RecoRank);\n-- ALTER TABLE [customertoproduct]\n--     ADD CONSTRAINT PK_CustomerToOffer PRIMARY KEY (CustomerCode, ProductCode);\n\n---------------------------------------------------------------------------------------------------------------\n------- CustomerToProduct\n---------------------------------------------------------------------------------------------------------------\nDELETE CustomerToProduct\nFROM CustomerToProduct main\n         JOIN [Sandbox-UnitedStaging].dbo.[StagingOffer_CustomerToProduct_Delta] staging\n              ON main.ProductCode = staging.ProductCode AND main.CustomerCode = staging.CustomerCode\nWHERE Metadata$Action = 'DELETE'\n  AND Metadata$IsUpdate = 0;\n\nINSERT INTO CustomerToProduct (ProductCode, CustomerCode, RecoRank, RecoType, ModelName)\nSELECT staging.ProductCode, staging.CustomerCode, staging.RecoRank, staging.RecoType, staging.ModelName\nFROM [Sandbox-UnitedStaging].dbo.[StagingOffer_CustomerToProduct_Delta] staging\n         LEFT JOIN CustomerToProduct main\n                   ON main.ProductCode = staging.ProductCode AND main.CustomerCode = staging.CustomerCode\nWHERE Metadata$Action = 'INSERT'\n  AND Metadata$IsUpdate = 0\n  AND main.ProductCode IS NULL;\n\nWITH cte AS (SELECT OfferId\n                  , ProgramCode\n                  , RunId\n                  , OfferCode\n                  , ProgramEngine\n                  , MemberAccount\n                  , ROW_NUMBER() OVER (\n        PARTITION BY\n        OfferId,\n        ProgramCode,\n        RunId,\n        OfferCode,\n        ProgramEngine,\n        MemberAccount\n        ORDER BY\n            OfferId,\n            ProgramCode,\n            RunId,\n            OfferCode,\n            ProgramEngine,\n            MemberAccount\n        ) row_num\n             FROM [dbo].[OfferStagingRuning_Available])\nDELETE\nFROM cte\nWHERE row_num > 1;\n\n---------------------------------------------------------------------------------------------------------------\n------- Handle clear cache\n---------------------------------------------------------------------------------------------------------------\nEXEC [dbo].[FlushCacheCouchBase]","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"sandboxunited_pipeline_Message_Notification_Success_V1","type":"ExecutePipeline","dependsOn":[{"activity":"Invoke next","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Success_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{}}},{"name":"sandboxunited_pipeline_Message_Notification_Failed_V1","type":"ExecutePipeline","dependsOn":[{"activity":"sandboxunited_pipeline_Message_Notification_Success_V1","dependencyConditions":["Failed","Skipped"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Failed_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{}}},{"name":"Fail","type":"Fail","dependsOn":[{"activity":"sandboxunited_pipeline_Message_Notification_Failed_V1","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"message":"step failed","errorCode":"112"}},{"name":"Invoke next","type":"ExecutePipeline","dependsOn":[{"activity":"Offer Staging running","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_stage_3_autodeal_sf_2_es","type":"PipelineReference"},"waitOnCompletion":false,"parameters":{"TransactionId":{"value":"@pipeline().parameters.TransactionId","type":"Expression"},"IsStageAllOffer":{"value":"@pipeline().parameters.IsStageAllOffer","type":"Expression"},"IsStage":{"value":"@pipeline().parameters.IsStage","type":"Expression"}}}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"TransactionId":{"type":"string"},"IsStageAllOffer":{"type":"string"},"IsStage":{"type":"string"}},"folder":{"name":"Sandbox United/Offer/Staging_Offer"},"annotations":[],"lastPublishTime":"2023-04-17T08:38:44Z"},"dependsOn":["[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Available_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Available_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Mass_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Mass_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetStore_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetStore_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetList_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetList_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetUser_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetUser_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_NewEnrollment_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_NewEnrollment_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_RECO_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_RECO_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_OfferProgramRuns_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_OfferProgramRuns_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_StagingCustomerToOffer_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_CustomerToOffer_Delta')]","[concat(variables('factoryId'), '/datasets/SnowflakeTable_SandboxUnited_StagingCustomerToProduct_Delta')]","[concat(variables('factoryId'), '/datasets/SqlServerTable_SandboxUnited_StagingOffer_CustomerToProduct_Delta')]","[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Success_V1')]","[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Failed_V1')]","[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_stage_3_autodeal_sf_2_es')]"]},{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_Message_Notification_Success_V1')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Success notitication V1","type":"WebActivity","dependsOn":[],"policy":{"timeout":"7.00:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"https://dev-etl-notification.azurewebsites.net:443/api/send-mail-v2/triggers/manual/invoke?api-version=2022-05-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=dtvUizvpLpbvOZKtm5HTaEOw7gNX6iWsgPWLHMrdtZ4","method":"POST","headers":{},"body":{"value":"{\n   \"DataFactoryName\": '@{concat(' ',pipeline().DataFactory)}',\n   \"PipelineName\": '@{concat(' ',pipeline()?.TriggeredByPipelineName)}',\n   \"Subject\":  '@{concat('[SUCCESS]✅ ',pipeline().parameters.Enviroment,' ',pipeline().parameters.Subject)}',\n   \"ErrorMessage\": '@{concat(' ',pipeline().parameters.Message)}',\n   \"EmailTo\": '@{concat(' ',pipeline().parameters.EmailTo)}',\n   \"output\": '@{concat(' ',pipeline().parameters.Output)}',\n   \"data\": '@{concat(' ',pipeline().parameters.Data)}'\n}","type":"Expression"}}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"Subject":{"type":"string"},"Message":{"type":"string","defaultValue":"Everything is okay"},"EmailTo":{"type":"string","defaultValue":"thuy.n@stor.ai,tam.h@stor.ai"},"Output":{"type":"string"},"Data":{"type":"string"},"Enviroment":{"type":"string","defaultValue":"SandboxUnited"}},"folder":{"name":"Notification Form/SandboxUnited_Notification"},"annotations":[],"lastPublishTime":"2023-04-12T09:45:51Z"},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_Uat2United_Offer_OfferStagingLog2')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_Uat2United')]","type":"LinkedServiceReference"},"folder":{"name":"UAT2 United/Uat2United_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[{"name":"TRANSACTIONID","type":"VARCHAR","precision":0,"scale":0},{"name":"ACTION","type":"VARCHAR","precision":100,"scale":0},{"name":"PROGRAMCODE","type":"VARCHAR","precision":20,"scale":0},{"name":"RUNID","type":"VARCHAR","precision":200,"scale":0},{"name":"DESCRIPTION","type":"VARCHAR","precision":208,"scale":0},{"name":"LOGTIME","type":"TIMESTAMP_NTZ","precision":29,"scale":9}],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGLOG"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Available_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[{"name":"OFFERID","type":"VARCHAR","precision":244,"scale":0},{"name":"PROGRAMCODE","type":"VARCHAR","precision":50,"scale":0},{"name":"RUNID","type":"VARCHAR","precision":0,"scale":0},{"name":"OFFERCODE","type":"VARCHAR","precision":50,"scale":0},{"name":"PROGRAMENGINE","type":"VARCHAR","precision":50,"scale":0},{"name":"MEMBERACCOUNT","type":"VARCHAR","precision":200,"scale":0},{"name":"METADATA$ACTION","type":"VARCHAR","precision":50,"scale":0},{"name":"METADATA$ISUPDATE","type":"BOOLEAN","precision":1,"scale":0},{"name":"METADATA$ROW_ID","type":"VARCHAR","precision":0,"scale":0}],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_AVAILABLE_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Available_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_SandboxUnited_Staging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_Available_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_Mass_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_MASS_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_Mass_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_SandboxUnited_Staging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_Mass_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetStore_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_TARGETSTORE_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetStore_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_SandboxUnited_Staging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_TargetStore_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetList_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_TARGETLIST_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetList_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_TargetList_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_TargetUser_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_TARGETUSER_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_TargetUser_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_TargetUser_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_NewEnrollment_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_NEWENROLLMENT_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_NewEnrollment_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_NewEnrollment_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_Offer_OfferStagingRuning_RECO_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERSTAGINGRUNING_RECO_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferStagingRuning_RECO_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferStagingRuning_RECO_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_OfferProgramRuns_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{"schema":"RS_SCHEMA","table":"OFFERPROGRAMRUNS_DELTA"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_OfferProgramRuns_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_OfferProgramRuns_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_StagingCustomerToOffer_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_CustomerToOffer_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_CustomerToOffer_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SnowflakeTable_SandboxUnited_StagingCustomerToProduct_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SnowflakeTable","schema":[],"typeProperties":{}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/SqlServerTable_SandboxUnited_StagingOffer_CustomerToProduct_Delta')]","type":"Microsoft.DataFactory/factories/datasets","apiVersion":"2018-06-01","properties":{"linkedServiceName":{"referenceName":"[parameters('SqlServer_Sandbox_UnitedStaging')]","type":"LinkedServiceReference"},"folder":{"name":"Sandbox United/SandboxUnited_Offer"},"annotations":[],"type":"SqlServerTable","schema":[],"typeProperties":{"schema":"dbo","table":"StagingOffer_CustomerToOffer_Delta"}},"dependsOn":[]},{"name":"[concat(parameters('factoryName'), '/sandboxunited_pipeline_stage_3_autodeal_sf_2_es')]","type":"Microsoft.DataFactory/factories/pipelines","apiVersion":"2018-06-01","properties":{"activities":[{"name":"Process Index Change target user","type":"Script","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"set TransactionId = '@{pipeline().parameters.TransactionId}';\nbegin\n\nif (exists (select top 1 1 from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA)) then\n\ndelete from  RS_SCHEMA.ElasticDocument main using (\n     select offerCode from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA  where Metadata$Action = 'INSERT')\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER)\n      group by offerCode\n ) index_delete \n where index_delete.OfferCode = main.OfferCode ;\n \n\nmerge into RS_SCHEMA.ElasticDocument main\nusing(\n select --top 100\n  PROGRAMCODE, \n  CustomerToOffer.CustomerCode || '_' || targetUser.offercode as id, \n  CustomerToOffer.CustomerCode  as customercode, \n  targetUser.OFFERCODE,targetUser.PRODUCTCODE, targetUser.STORECODE\n  from (\n     select Max(PROGRAMCODE) as PROGRAMCODE, offerCode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode , \n     ARRAY_AGG (distinct storeCode) within group (order by storeCode) as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER\n       where OFFERID in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER_DELTA)\n     group by offerCode\n ) targetUser\njoin  RS_SCHEMA.CustomerToOffer on CustomerToOffer.OfferCode = targetUser.OfferCode) indexchange on  indexchange.Id = main.Id\nwhen matched then update set\n\t\t\t\t\t\t\tPROGRAMCODE = indexchange.PROGRAMCODE,\n\t\t\t\t\t        CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nwhen not matched then insert (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nvalues (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);\nend if;\n\nIF  (exists(select top 1 1 from RS_SCHEMA.CustomerToOffer_DELTA where transactionid = $TransactionId)) then\ndelete from  RS_SCHEMA.ElasticDocument main using (\n     select CUSTOMERCODE, OFFERCODE from RS_SCHEMA.CustomerToOffer_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE and transactionid = $TransactionId\n ) index_delete \n where index_delete.OfferCode = main.OfferCode and index_delete.CustomerCode = main.CUSTOMERCODE;\n\n\nmerge into RS_SCHEMA.ElasticDocument main\nusing(\n select --top 100\n  PROGRAMCODE, \n  CustomerToOffer_DELTA.CustomerCode || '_' || targetUser.offercode as id, \n  CustomerToOffer_DELTA.CustomerCode  as customercode, \n  targetUser.OFFERCODE,targetUser.PRODUCTCODE, targetUser.STORECODE\n  from (\n     select Max(PROGRAMCODE) as PROGRAMCODE, offerCode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode , \n     ARRAY_AGG (distinct storeCode) within group (order by storeCode) as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_TARGETUSER\n     group by offerCode\n ) targetUser\njoin  RS_SCHEMA.CustomerToOffer_DELTA on CustomerToOffer_DELTA.OfferCode = targetUser.OfferCode\nand Metadata$Action = 'INSERT' and  transactionid = $TransactionId\n) indexchange on indexchange.Id = main.Id\nwhen matched then update set\n                            PROGRAMCODE = indexchange.PROGRAMCODE,\n                            CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nwhen not matched then insert (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nvalues (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);\n\nend if;\nend;","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Process Index Change_Mass_Offer","type":"Script","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"DELETE FROM RS_SCHEMA.ElasticDocument AS main USING (\n     select offerCode from RS_SCHEMA.OFFERSTAGINGRUNING_MASS_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_MASS_DELTA  where Metadata$Action = 'INSERT')\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_MASS)\n      group by offerCode\n ) AS index_delete \nWHERE index_delete.OfferCode = main.OfferCode;\n \nMERGE INTO RS_SCHEMA.ElasticDocument AS main\nUSING (\n    select Max(PROGRAMCODE) as PROGRAMCODE,\n    'MASS_' || offercode as id, \n    'MASS' as CUSTOMERCODE,\n     offerCode as offercode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode, \n     [] as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_MASS\n     where OFFERID in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_MASS_DELTA) \n     and PROGRAMCODE not in (select PROGRAMCODE from RS_SCHEMA.OFFERPROGRAM where ENGINE = 'HEALTH')\n     and PROGRAMCODE != 'AUTO_LOAD_OFFERS'\n     group by offerCode\n ) indexchange ON indexchange.Id = main.Id\nWHEN MATCHED THEN UPDATE SET\n\t\t\t\t\t\t\tPROGRAMCODE = indexchange.PROGRAMCODE,\n\t\t\t\t\t        CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nWHEN NOT MATCHED THEN INSERT (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nVALUES (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Process Index Change_Target_Store","type":"Script","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"DELETE FROM RS_SCHEMA.ElasticDocument AS main USING (\n     select offerCode from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE_DELTA\n     where Metadata$Action = 'DELETE' and Metadata$IsUpdate =FALSE\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE_DELTA where Metadata$Action = 'INSERT')\n     and OFFERID not in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE)\n      group by offerCode\n ) AS index_delete \nWHERE index_delete.OfferCode = main.OfferCode;\n \nMERGE INTO RS_SCHEMA.ElasticDocument AS main\nUSING (\n    select Max(PROGRAMCODE) as PROGRAMCODE,\n    'MASS_' || offercode as id, \n    'MASS' as CUSTOMERCODE,\n     offerCode as offercode,\n     ARRAY_AGG (distinct productcode) within group (order by productcode) as productcode, \n     ARRAY_AGG (distinct storeCode) within group (order by storeCode) as storecode \n     from  RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE\n     where OFFERID in (select OFFERID from RS_SCHEMA.OFFERSTAGINGRUNING_TARGETSTORE_DELTA) \n     group by offerCode\n ) indexchange ON indexchange.Id = main.Id\nWHEN MATCHED THEN UPDATE SET\n\t\t\t\t\t\t\tPROGRAMCODE = indexchange.PROGRAMCODE,\n\t\t\t\t\t        CUSTOMERCODE = indexchange.CUSTOMERCODE,\n                            OFFERCODE = indexchange.OFFERCODE,\n                            PRODUCTCODE = indexchange.PRODUCTCODE,\n                            STORECODE = indexchange.STORECODE\nWHEN NOT MATCHED THEN INSERT (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE)\nVALUES (PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE);","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Get CDC change","type":"Script","dependsOn":[{"activity":"Process Index Change target user","dependencyConditions":["Succeeded"]},{"activity":"Process Index Change_Mass_Offer","dependencyConditions":["Succeeded"]},{"activity":"Process Index Change_Target_Store","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"linkedServiceName":{"referenceName":"[parameters('Snowflake_SandboxUnited')]","type":"LinkedServiceReference"},"typeProperties":{"scripts":[{"type":"Query","text":{"value":"BEGIN\nINSERT INTO Rs_Schema.ElasticDocument_delta \n    (ROWID,PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE,METADATA$ACTION,METADATA$ISUPDATE,METADATA$ROW_ID,TRANSACTIONID)\nSELECT ROWID,PROGRAMCODE,ID,CUSTOMERCODE,OFFERCODE,PRODUCTCODE,STORECODE,METADATA$ACTION,METADATA$ISUPDATE,METADATA$ROW_ID,'@{pipeline().parameters.TransactionId}'\nFROM Rs_Schema.ElasticDocument_check\nWHERE \n    Metadata$Action != 'DELETE' \n    OR (Metadata$Action = 'DELETE' \n        AND Metadata$IsUpdate = FALSE);\n\nCREATE OR REPLACE TABLE RS_SCHEMA.STAGINGELASTICDOCUMENT_DELTA(\n    partition_num NUMBER AUTOINCREMENT,\n    ID VARCHAR,\n    CUSTOMERCODE VARCHAR, \n    OFFERCODE VARCHAR,\n    PRODUCTCODES ARRAY,\n    STORECODES ARRAY,\n    METADATA$ACTION VARCHAR(50),\n    METADATA$ISUPDATE BOOLEAN\n);\n\nINSERT INTO RS_SCHEMA.STAGINGELASTICDOCUMENT_DELTA \n(ID, CUSTOMERCODE, OFFERCODE, PRODUCTCODES, STORECODES, METADATA$ACTION, METADATA$ISUPDATE)\nSELECT\n    ID,\n    CUSTOMERCODE, \n    OFFERCODE,\n    PRODUCTCODE as PRODUCTCODES,\n    STORECODE as STORECODES,\n    METADATA$ACTION,\n    METADATA$ISUPDATE\nFROM RS_SCHEMA.ELASTICDOCUMENT_DELTA\nWHERE \n    TransactionId = '@{pipeline().parameters.TransactionId}';\n\nEND;","type":"Expression"}}],"scriptBlockExecutionTimeout":"02:00:00"}},{"name":"Reset StreamSets offset","type":"WebActivity","dependsOn":[{"activity":"Get CDC change","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"http://192.168.20.208:18630/rest/v1/pipeline/SandboxUne3ac7afd-a50f-46e0-a8fd-0719d9a0fd33/resetOffset","connectVia":{"referenceName":"dev-rs-dxp-staging-ir","type":"IntegrationRuntimeReference"},"method":"POST","headers":{"X-Requested-By":"Data Collector"},"body":{"value":"{}","type":"Expression"},"authentication":{"type":"Basic","username":"admin","password":{"type":"AzureKeyVaultSecret","store":{"referenceName":"[parameters('StagingKeyVault')]","type":"LinkedServiceReference"},"secretName":"dev-streamset-pw"}}}},{"name":"Trigger StreamSets CRUD and Clear cache","type":"WebActivity","dependsOn":[{"activity":"Reset StreamSets offset","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"url":"http://192.168.20.208:18630/rest/v1/pipeline/SandboxUne3ac7afd-a50f-46e0-a8fd-0719d9a0fd33/start","connectVia":{"referenceName":"dev-rs-dxp-staging-ir","type":"IntegrationRuntimeReference"},"method":"POST","headers":{"X-Requested-By":"Data Collector"},"body":{"value":"{\n    \"TransactionId\":\"@{pipeline().parameters.TransactionId}\",\n    \"IsStageAllOffer\":\"@{pipeline().parameters.IsStageAllOffer}\"\n}","type":"Expression"},"authentication":{"type":"Basic","username":"admin","password":{"type":"AzureKeyVaultSecret","store":{"referenceName":"[parameters('StagingKeyVault')]","type":"LinkedServiceReference"},"secretName":"dev-streamset-pw"}}}},{"name":"sandboxunited_pipeline_Message_Notification_Success_V1","type":"ExecutePipeline","dependsOn":[{"activity":"Trigger StreamSets CRUD and Clear cache","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Success_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{}}},{"name":"sandboxunited_pipeline_Message_Notification_Failed_V1","type":"ExecutePipeline","dependsOn":[{"activity":"sandboxunited_pipeline_Message_Notification_Success_V1","dependencyConditions":["Failed","Skipped"]}],"userProperties":[],"typeProperties":{"pipeline":{"referenceName":"sandboxunited_pipeline_Message_Notification_Failed_V1","type":"PipelineReference"},"waitOnCompletion":true,"parameters":{}}},{"name":"Fail","type":"Fail","dependsOn":[{"activity":"sandboxunited_pipeline_Message_Notification_Failed_V1","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"message":"step failed","errorCode":"112"}}],"policy":{"elapsedTimeMetric":{}},"parameters":{"TransactionId":{"type":"string"},"IsStageAllOffer":{"type":"string"},"IsStage":{"type":"string","defaultValue":"false"}},"variables":{"Programcodes":{"type":"Array"},"programCodesQuery":{"type":"String"}},"folder":{"name":"Sandbox United/Offer/Staging_Offer"},"annotations":[]},"dependsOn":["[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Success_V1')]","[concat(variables('factoryId'), '/pipelines/sandboxunited_pipeline_Message_Notification_Failed_V1')]"]}]}